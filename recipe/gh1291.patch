diff --git a/.github/workflows/headless-tests.yml b/.github/workflows/headless-tests.yml
index 96c0ca2f..ede43e49 100644
--- a/.github/workflows/headless-tests.yml
+++ b/.github/workflows/headless-tests.yml
@@ -14,7 +14,7 @@ jobs:
     strategy:
       matrix:
         os: [ubuntu-latest]
-        python-version: ['3.11']
+        python-version: ['3.10']
       fail-fast: false
 
     runs-on: ${{ matrix.os }}
@@ -23,15 +23,19 @@ jobs:
       ETS_TOOLKIT: 'null'
 
     steps:
-    - uses: actions/checkout@v4
+    - uses: actions/checkout@v2
     - name: Set up Python ${{ matrix.python-version }}
-      uses: actions/setup-python@v5
+      uses: actions/setup-python@v2
       with:
         python-version: ${{ matrix.python-version }}
     - name: Install dependencies
       run: |
         python -m pip install --upgrade pip setuptools wheel
-        python -m pip install numpy "vtk<9.3" pillow pytest traitsui
+        python -m pip install numpy
+        python -m pip install vtk
+        python -m pip install pillow
+        python -m pip install pytest
+        python -m pip install traitsui==7.2.1
     - name: Install mayavi and tvtk
       run: python -m pip install -v .
     - name: Test tvtk package
diff --git a/.github/workflows/run-mayavi-tests.yml b/.github/workflows/run-mayavi-tests.yml
index b3491fd3..447cfc7f 100644
--- a/.github/workflows/run-mayavi-tests.yml
+++ b/.github/workflows/run-mayavi-tests.yml
@@ -11,13 +11,10 @@ jobs:
     strategy:
       matrix:
         os: [ubuntu-latest, windows-latest, macos-latest]
-        python-version: ['3.8']
+        python-version: ['3.7']
         qt-api: ['pyqt5']
         include:
-          # TODO: Add 3.12 once VTK 9.3 is properly supported
-          - python-version: '3.11'
-            qt-api: 'pyqt6'
-            os: ubuntu-latest
+          # Should run 3.11 once the traits bug goes away
           - python-version: '3.10'
             qt-api: 'pyside6'
             os: ubuntu-latest
@@ -42,20 +39,25 @@ jobs:
       VTK_PARSER_VERBOSE: 'true'
 
     steps:
-    - uses: actions/checkout@v4
+    - uses: actions/checkout@v2
     - name: Install Linux packages for Qt5/Qt6 support and start Xvfb
       uses: pyvista/setup-headless-display-action@main
       with:
         qt: true
       if: startsWith(matrix.os, 'ubuntu')
     - name: Set up Python ${{ matrix.python-version }}
-      uses: actions/setup-python@v5
+      uses: actions/setup-python@v2
       with:
         python-version: ${{ matrix.python-version }}
     - name: Install dependencies
       run: |
         python -m pip install --upgrade pip setuptools wheel
-        python -m pip install --upgrade ${{ matrix.qt-api }} numpy "vtk<9.3" pillow pytest traits traitsui
+        python -m pip install ${{ matrix.qt-api }}
+        python -m pip install numpy
+        python -m pip install vtk
+        python -m pip install pillow
+        python -m pip install pytest
+        python -m pip install traitsui==7.2.1
     - name: Install mayavi and tvtk
       run: python -um pip install -ve .[app]
     - name: Test Mayavi package
diff --git a/mayavi/filters/threshold.py b/mayavi/filters/threshold.py
index 4c648297..b9329e7c 100644
--- a/mayavi/filters/threshold.py
+++ b/mayavi/filters/threshold.py
@@ -14,7 +14,6 @@ from traits.api import Instance, Range, Float, Bool, \
                                  Property, Enum
 from traitsui.api import View, Group, Item
 from tvtk.api import tvtk
-from tvtk.common import vtk_major_version, vtk_minor_version
 
 # Local imports
 from mayavi.core.filter import Filter
@@ -166,19 +165,13 @@ class Threshold(Filter):
     ######################################################################
     def _lower_threshold_changed(self, new_value):
         fil = self.threshold_filter
-        if (vtk_major_version, vtk_minor_version) >= (9, 1):
-            fil.lower_threshold = new_value
-        else:
-            fil.threshold_between(new_value, self.upper_threshold)
+        fil.threshold_between(new_value, self.upper_threshold)
         fil.update()
         self.data_changed = True
 
     def _upper_threshold_changed(self, new_value):
         fil = self.threshold_filter
-        if (vtk_major_version, vtk_minor_version) >= (9, 1):
-            fil.upper_threshold = new_value
-        else:
-            fil.threshold_between(self.lower_threshold, new_value)
+        fil.threshold_between(self.lower_threshold, new_value)
         fil.update()
         self.data_changed = True
 
@@ -277,12 +270,8 @@ class Threshold(Filter):
             return
         fil = new
         self.configure_connection(fil, self.inputs[0].outputs[0])
-        if (vtk_major_version, vtk_minor_version) >= (9, 1):
-            fil.lower_threshold = self.lower_threshold
-            fil.upper_threshold = self.upper_threshold
-        else:
-            fil.threshold_between(self.lower_threshold,
-                                  self.upper_threshold)
+        fil.threshold_between(self.lower_threshold,
+                              self.upper_threshold)
         fil.update()
         self._set_outputs([fil])
 
diff --git a/mayavi/tests/test_mlab_source.py b/mayavi/tests/test_mlab_source.py
index 49c6e87c..554431a8 100644
--- a/mayavi/tests/test_mlab_source.py
+++ b/mayavi/tests/test_mlab_source.py
@@ -38,28 +38,28 @@ class TestMGlyphSource(unittest.TestCase):
         """Check if the sources traits are set correctly."""
         x, y, z, v, s, src = self.get_data()
         # Check if points are set correctly.
-        self.assertEqual(np.all(src.points[:, 0].ravel() == x.ravel()),
+        self.assertEqual(np.alltrue(src.points[:, 0].ravel() == x.ravel()),
                          True)
-        self.assertEqual(np.all(src.points[:, 1].ravel() == y.ravel()),
+        self.assertEqual(np.alltrue(src.points[:, 1].ravel() == y.ravel()),
                          True)
-        self.assertEqual(np.all(src.points[:, 2].ravel() == z.ravel()),
+        self.assertEqual(np.alltrue(src.points[:, 2].ravel() == z.ravel()),
                          True)
         # Check the vectors and scalars.
-        self.assertEqual(np.all(src.vectors == v), True)
-        self.assertEqual(np.all(src.scalars == s), True)
+        self.assertEqual(np.alltrue(src.vectors == v), True)
+        self.assertEqual(np.alltrue(src.scalars == s), True)
 
     def check_dataset(self):
         """Check the TVTK dataset."""
         x, y, z, v, s, src = self.get_data()
         # Check if the dataset is setup right.
         pts = src.dataset.points.to_array()
-        self.assertEqual(np.all(pts[:, 0].ravel() == x.ravel()), True)
-        self.assertEqual(np.all(pts[:, 1].ravel() == y.ravel()), True)
-        self.assertEqual(np.all(pts[:, 2].ravel() == z.ravel()), True)
+        self.assertEqual(np.alltrue(pts[:, 0].ravel() == x.ravel()), True)
+        self.assertEqual(np.alltrue(pts[:, 1].ravel() == y.ravel()), True)
+        self.assertEqual(np.alltrue(pts[:, 2].ravel() == z.ravel()), True)
         vec = src.dataset.point_data.vectors.to_array()
         sc = src.dataset.point_data.scalars.to_array()
-        self.assertEqual(np.all(vec == v), True)
-        self.assertEqual(np.all(sc == s.ravel()), True)
+        self.assertEqual(np.alltrue(vec == v), True)
+        self.assertEqual(np.alltrue(sc == s.ravel()), True)
 
     def test_geometry_filter_works(self):
         # This tests the bug #1071 and segfaults without the fix on VTK 9.x.
@@ -217,27 +217,27 @@ class TestMVerticalSource(unittest.TestCase):
         """Check if the sources traits are set correctly."""
         x, y, z, s, src = self.get_data()
         # Check if points are set correctly.
-        self.assertEqual(np.all(src.points[:, 0].ravel() == x), True)
-        self.assertEqual(np.all(src.points[:, 1].ravel() == y), True)
-        self.assertEqual(np.all(src.points[:, 2].ravel() == z), True)
+        self.assertEqual(np.alltrue(src.points[:, 0].ravel() == x), True)
+        self.assertEqual(np.alltrue(src.points[:, 1].ravel() == y), True)
+        self.assertEqual(np.alltrue(src.points[:, 2].ravel() == z), True)
         # Check the vectors and scalars.
-        self.assertEqual(np.all(src.vectors[:, -1] == s), True)
-        self.assertEqual(np.all(src.vectors[:, :-1] == 1), True)
-        self.assertEqual(np.all(src.scalars == s), True)
+        self.assertEqual(np.alltrue(src.vectors[:, -1] == s), True)
+        self.assertEqual(np.alltrue(src.vectors[:, :-1] == 1), True)
+        self.assertEqual(np.alltrue(src.scalars == s), True)
 
     def check_dataset(self):
         """Check the TVTK dataset."""
         x, y, z, s, src = self.get_data()
         # Check if the dataset is setup right.
         pts = src.dataset.points.to_array()
-        self.assertEqual(np.all(pts[:, 0].ravel() == x), True)
-        self.assertEqual(np.all(pts[:, 1].ravel() == y), True)
-        self.assertEqual(np.all(pts[:, 2].ravel() == z), True)
+        self.assertEqual(np.alltrue(pts[:, 0].ravel() == x), True)
+        self.assertEqual(np.alltrue(pts[:, 1].ravel() == y), True)
+        self.assertEqual(np.alltrue(pts[:, 2].ravel() == z), True)
         vec = src.dataset.point_data.vectors.to_array()
         sc = src.dataset.point_data.scalars.to_array()
-        self.assertEqual(np.all(vec[:, -1] == s), True)
-        self.assertEqual(np.all(vec[:, :-1] == 1), True)
-        self.assertEqual(np.all(sc == s), True)
+        self.assertEqual(np.alltrue(vec[:, -1] == s), True)
+        self.assertEqual(np.alltrue(vec[:, :-1] == 1), True)
+        self.assertEqual(np.alltrue(sc == s), True)
 
     def test_reset(self):
         "Test the reset method."
@@ -323,12 +323,12 @@ class TestMArraySource(unittest.TestCase):
         """Check if the sources traits are set correctly."""
         x, y, z, v, s, src = self.get_data()
         # Check if points are set correctly.
-        self.assertEqual(np.all(src.x == x), True)
-        self.assertEqual(np.all(src.y == y), True)
-        self.assertEqual(np.all(src.z == z), True)
+        self.assertEqual(np.alltrue(src.x == x), True)
+        self.assertEqual(np.alltrue(src.y == y), True)
+        self.assertEqual(np.alltrue(src.z == z), True)
         # Check the vectors and scalars.
-        self.assertEqual(np.all(src.vectors == v), True)
-        self.assertEqual(np.all(src.scalars == s), True)
+        self.assertEqual(np.alltrue(src.vectors == v), True)
+        self.assertEqual(np.alltrue(src.scalars == s), True)
 
     def check_dataset(self):
         """Check the TVTK dataset."""
@@ -348,9 +348,9 @@ class TestMArraySource(unittest.TestCase):
         vec = src.dataset.point_data.vectors.to_array()
         sc = src.dataset.point_data.scalars.to_array()
         v1 = v.transpose((2, 0, 1, 3))
-        self.assertEqual(np.all(vec.ravel() == v1.ravel()), True)
+        self.assertEqual(np.alltrue(vec.ravel() == v1.ravel()), True)
         s1 = s.transpose()
-        self.assertEqual(np.all(sc.ravel() == s1.ravel()), True)
+        self.assertEqual(np.alltrue(sc.ravel() == s1.ravel()), True)
 
     def test_reset(self):
         "Test the reset method."
@@ -447,22 +447,22 @@ class TestMLineSource(unittest.TestCase):
         """Check if the sources traits are set correctly."""
         x, y, z, s, src = self.get_data()
         # Check if points are set correctly.
-        self.assertEqual(np.all(src.points[:, 0].ravel() == x), True)
-        self.assertEqual(np.all(src.points[:, 1].ravel() == y), True)
-        self.assertEqual(np.all(src.points[:, 2].ravel() == z), True)
+        self.assertEqual(np.alltrue(src.points[:, 0].ravel() == x), True)
+        self.assertEqual(np.alltrue(src.points[:, 1].ravel() == y), True)
+        self.assertEqual(np.alltrue(src.points[:, 2].ravel() == z), True)
         # Check the scalars.
-        self.assertEqual(np.all(src.scalars == s), True)
+        self.assertEqual(np.alltrue(src.scalars == s), True)
 
     def check_dataset(self):
         """Check the TVTK dataset."""
         x, y, z, s, src = self.get_data()
         # Check if the dataset is setup right.
         pts = src.dataset.points.to_array()
-        self.assertEqual(np.all(pts[:, 0].ravel() == x), True)
-        self.assertEqual(np.all(pts[:, 1].ravel() == y), True)
-        self.assertEqual(np.all(pts[:, 2].ravel() == z), True)
+        self.assertEqual(np.alltrue(pts[:, 0].ravel() == x), True)
+        self.assertEqual(np.alltrue(pts[:, 1].ravel() == y), True)
+        self.assertEqual(np.alltrue(pts[:, 2].ravel() == z), True)
         sc = src.dataset.point_data.scalars.to_array()
-        self.assertEqual(np.all(sc == s), True)
+        self.assertEqual(np.alltrue(sc == s), True)
 
     def test_reset(self):
         "Test the reset method."
@@ -613,10 +613,10 @@ class TestMArray2DSource(unittest.TestCase):
         x, y, s, src = self.get_data()
 
         # Check if points are set correctly.
-        self.assertEqual(np.all(src.x == x), True)
-        self.assertEqual(np.all(src.y == y), True)
+        self.assertEqual(np.alltrue(src.x == x), True)
+        self.assertEqual(np.alltrue(src.y == y), True)
         # Check the scalars.
-        self.assertEqual(np.all(src.scalars == s), True)
+        self.assertEqual(np.alltrue(src.scalars == s), True)
 
     def check_dataset(self):
         """Check the TVTK dataset."""
@@ -635,7 +635,7 @@ class TestMArray2DSource(unittest.TestCase):
 
         sc = src.dataset.point_data.scalars.to_array()
         s1 = s.transpose()
-        self.assertEqual(np.all(sc.ravel() == s1.ravel()), True)
+        self.assertEqual(np.alltrue(sc.ravel() == s1.ravel()), True)
 
     def test_reset(self):
         x, y, s, src = self.get_data()
@@ -704,17 +704,17 @@ class TestMGridSource(unittest.TestCase):
 
         # Check if points are set correctly.
         self.assertEqual(
-            np.all(src.points[:, 0].ravel() == x.ravel()), True
+            np.alltrue(src.points[:, 0].ravel() == x.ravel()), True
         )
         self.assertEqual(
-            np.all(src.points[:, 1].ravel() == y.ravel()), True
+            np.alltrue(src.points[:, 1].ravel() == y.ravel()), True
         )
         self.assertEqual(
-            np.all(src.points[:, 2].ravel() == z.ravel()), True
+            np.alltrue(src.points[:, 2].ravel() == z.ravel()), True
         )
         # Check the  scalars.
 
-        self.assertEqual(np.all(src.scalars == s), True)
+        self.assertEqual(np.alltrue(src.scalars == s), True)
 
     def check_dataset(self):
         """Check the TVTK dataset."""
@@ -722,11 +722,11 @@ class TestMGridSource(unittest.TestCase):
         # Check if the dataset is setup right.
 
         pts = src.dataset.points.to_array()
-        self.assertEqual(np.all(pts[:, 0].ravel() == x.ravel()), True)
-        self.assertEqual(np.all(pts[:, 1].ravel() == y.ravel()), True)
-        self.assertEqual(np.all(pts[:, 2].ravel() == z.ravel()), True)
+        self.assertEqual(np.alltrue(pts[:, 0].ravel() == x.ravel()), True)
+        self.assertEqual(np.alltrue(pts[:, 1].ravel() == y.ravel()), True)
+        self.assertEqual(np.alltrue(pts[:, 2].ravel() == z.ravel()), True)
         sc = src.dataset.point_data.scalars.to_array()
-        self.assertEqual(np.all(sc == s.ravel()), True)
+        self.assertEqual(np.alltrue(sc == s.ravel()), True)
 
     def test_reset(self):
         "Test the reset method."
@@ -819,17 +819,17 @@ class TestMArray2DSourceNoArgs(unittest.TestCase):
         # Check if points are set correctly.
 
         if x is not None and y is not None:
-            self.assertEqual(np.all(src.x == x), True)
-            self.assertEqual(np.all(src.y == y), True)
+            self.assertEqual(np.alltrue(src.x == x), True)
+            self.assertEqual(np.alltrue(src.y == y), True)
 
         else:
             nx, ny = s.shape
             x1, y1 = np.mgrid[-nx/2.:nx/2, -ny/2.:ny/2]
-            self.assertEqual(np.all(src.x == x1), True)
-            self.assertEqual(np.all(src.y == y1), True)
+            self.assertEqual(np.alltrue(src.x == x1), True)
+            self.assertEqual(np.alltrue(src.y == y1), True)
 
         # Check the scalars.
-        self.assertEqual(np.all(src.scalars == s), True)
+        self.assertEqual(np.alltrue(src.scalars == s), True)
 
     def check_dataset(self):
         """Check the TVTK dataset."""
@@ -853,7 +853,7 @@ class TestMArray2DSourceNoArgs(unittest.TestCase):
 
         sc = src.dataset.point_data.scalars.to_array()
         s1 = s.transpose()
-        self.assertEqual(np.all(sc.ravel() == s1.ravel()), True)
+        self.assertEqual(np.alltrue(sc.ravel() == s1.ravel()), True)
 
     def test_reset(self):
         "Test the reset method."
@@ -912,11 +912,11 @@ class TestMTriangularMeshSource(unittest.TestCase):
         x, y, z, triangles, s, src = self.get_data()
 
         # Check if points are set correctly.
-        self.assertEqual(np.all(src.x == x), True)
-        self.assertEqual(np.all(src.y == y), True)
-        self.assertEqual(np.all(src.z == z), True)
+        self.assertEqual(np.alltrue(src.x == x), True)
+        self.assertEqual(np.alltrue(src.y == y), True)
+        self.assertEqual(np.alltrue(src.z == z), True)
         # Check the scalars.
-        self.assertEqual(np.all(src.scalars == s), True)
+        self.assertEqual(np.alltrue(src.scalars == s), True)
 
     def test_reset(self):
         "Test the reset method."
diff --git a/mayavi/tests/test_set_active_attribute.py b/mayavi/tests/test_set_active_attribute.py
index 7b01dee6..d46357c7 100644
--- a/mayavi/tests/test_set_active_attribute.py
+++ b/mayavi/tests/test_set_active_attribute.py
@@ -64,8 +64,8 @@ class TestSetActiveAttribute(unittest.TestCase):
         c = src.children[1]
         sc = get_output(c.outputs[0]).point_data.scalars
         self.assertEqual(sc.name,'temperature')
-        # It is an iso-contour! Allow rounding differences
-        self.assertAlmostEqual(sc.range[0], sc.range[1], places=5)
+        # It is an iso-contour!
+        self.assertEqual(sc.range[0],sc.range[1])
         aa = c.children[0].children[0]
         self.assertEqual(aa.point_scalars_name,'pressure')
         sc = get_output(aa.outputs[0]).point_data.scalars
diff --git a/mayavi/version.py b/mayavi/version.py
index 688314ff..37ecf57c 100644
--- a/mayavi/version.py
+++ b/mayavi/version.py
@@ -1,9 +1,10 @@
 # Wrapped in a try/except in those situations where someone hasn't installed
 # as an egg.  What do we do then?  For now, we just punt since we don't want
 # to define the version number in two places.
-import importlib.metadata
-
 try:
-    version = importlib.metadata.version("mayavi")
-except Exception:
+    import pkg_resources
+    version = pkg_resources.require('Mayavi')[0].version
+except:
     version = ''
+
+
diff --git a/setup.py b/setup.py
index 82e7ba42..09c7af8f 100644
--- a/setup.py
+++ b/setup.py
@@ -3,24 +3,36 @@
 # Copyright (c) 2008-2022 by Enthought, Inc.
 # All rights reserved.
 
-from setuptools import Command, Extension, setup, find_packages
-from setuptools.command.build_py import build_py
-from setuptools.command.develop import develop
-from setuptools.command.install import install
+# NOTE: Setuptools must be imported BEFORE numpy.distutils or else
+# numpy.distutils does the Wrong(TM) thing.
+import setuptools
+from setuptools import Command
 
+try:
+    import numpy
+    from numpy.distutils.command import build, install_data, build_src
+    from numpy.distutils.core import setup
+    HAS_NUMPY = True
+except ImportError:
+    HAS_NUMPY = False
+    from distutils.command import build, install_data
+    from distutils.core import setup
+import io
 import os
 import time
 import subprocess
 import shutil
 import re
 import sys
+import traceback
 from os.path import (abspath, basename, dirname, exists, getmtime, isdir,
                      join, split)
-from pathlib import Path
 
-from tvtk._setup import can_compile_extensions, gen_tvtk_classes_zip  # noqa
+from distutils.command import clean
+from distutils import log
+from setuptools.command import develop
+
 
-MY_DIR = os.path.dirname(__file__)
 MODE = 'normal'
 if len(sys.argv) >= 2 and \
    ('--help' in sys.argv[1:] or
@@ -48,7 +60,7 @@ class GenDocs(Command):
         ]
 
     def latest_modified(self, the_path, filetypes='', ignore_dirs=''):
-        """Traverse a path looking for the most recently modified file.
+        """Traverses a path looking for the most recently modified file
 
         Parameters
         ----------
@@ -67,7 +79,12 @@ class GenDocs(Command):
             Modification time of latest_path.
         latest_path : string
             Most recently modified file.
+
+        Description
+        -----------
+
         """
+
         file_re = re.compile(filetypes)
         dir_re = re.compile(ignore_dirs)
 
@@ -98,7 +115,8 @@ class GenDocs(Command):
             return getmtime(the_path), the_path
 
     def mlab_reference(self):
-        """If mayavi is installed, run the mlab_reference generator."""
+        """ If mayavi is installed, run the mlab_reference generator.
+        """
         # XXX: This is really a hack: the script is not made to be used
         # for different projects, but it ended up being. This part is
         # mayavi-specific.
@@ -106,8 +124,8 @@ class GenDocs(Command):
         mlab_ref_dir = join(DEFAULT_INPUT_DIR, 'mayavi', 'auto')
 
         source_path = 'mayavi'
-        sources = r'(\.py)|(\.rst)$'
-        excluded_dirs = r'^\.'
+        sources = '(\.py)|(\.rst)$'
+        excluded_dirs = '^\.'
         target_path = mlab_ref_dir
         target_time = self.latest_modified(target_path,
                                            ignore_dirs=excluded_dirs)[0]
@@ -122,11 +140,12 @@ class GenDocs(Command):
                 from mayavi.tools import auto_doc
                 print("Generating the mlab reference documentation")
                 os.system('python mlab_reference.py')
-            except Exception:
+            except:
                 pass
 
     def example_files(self):
-        """Generate the documentation files for the examples."""
+        """ Generate the documentation files for the examples.
+        """
         mlab_ref_dir = join(DEFAULT_INPUT_DIR, 'mayavi', 'auto')
 
         source_path = join('examples', 'mayavi')
@@ -196,7 +215,8 @@ def list_doc_projects():
     """ List the different source directories under DEFAULT_INPUT_DIR
         for which we have docs.
     """
-    source_dir = join(abspath(MY_DIR), DEFAULT_INPUT_DIR)
+    source_dir = join(abspath(dirname(__file__)),
+                      DEFAULT_INPUT_DIR)
     source_list = os.listdir(source_dir)
     # Check to make sure we're using non-hidden directories.
     source_dirs = [listing for listing in source_list
@@ -238,29 +258,139 @@ def _tvtk_built_recently(zipfile, delay):
 
 # Our custom distutils hooks
 def build_tvtk_classes_zip():
+    MY_DIR = os.path.dirname(__file__)
     zipfile = os.path.join(MY_DIR, 'tvtk', 'tvtk_classes.zip')
     if _tvtk_built_recently(zipfile, delay=120):
         print("Already built tvtk_classes.zip")
         return
     else:
         print("Building tvtk_classes.zip")
+    sys.path.insert(0, MY_DIR)
+    import tvtk
+    tvtk_dir = 'tvtk'
+    sys.path.insert(0, tvtk_dir)
+    from setup import gen_tvtk_classes_zip
     gen_tvtk_classes_zip()
+    sys.path.remove(tvtk_dir)
+    sys.path.remove(MY_DIR)
+
+
+class MyBuild(build.build):
+    """ A build hook to generate the documentation.
+
+        We sub-class numpy.distutils' build command because we're relying on
+        numpy.distutils' setup method to build python extensions.
 
+    """
+
+    def run(self):
+        build_tvtk_classes_zip()
+        build.build.run(self)
+
+
+class MyBuildSrc(build_src.build_src):
+    """Build hook to generate the TVTK ZIP files.
+
+    We do it here also because for editable installs, setup.py build is not
+    called.
+    """
 
-class MyBuildPy(build_py):
-    """A build hook to generate the documentation."""
+    def run(self):
+        build_tvtk_classes_zip()
+        build_src.build_src.run(self)
+
+
+class MyDevelop(develop.develop):
+    """ A hook to build the TVTK ZIP file on develop.
+
+        Subclassing setuptools' command because numpy.distutils doesn't
+        have an implementation.
+
+    """
 
     def run(self):
+        # Make sure that the 'build_src' command will
+        # always be inplace when we do a 'develop'.
+        self.reinitialize_command('build_src', inplace=1)
+
+        # tvtk_classes.zip always need to be created on 'develop'.
         build_tvtk_classes_zip()
-        super().run()
 
+        develop.develop.run(self)
+
+
+class MyInstallData(install_data.install_data):
+    """ An install hook to copy the generated documentation.
+
+        We subclass numpy.distutils' command because we're relying on
+        numpy.distutils' setup method to build python extensions.
 
-class MyDevelop(develop):
-    """A hook to build the TVTK ZIP file on develop."""
+    """
 
     def run(self):
+        install_data_command = self.get_finalized_command('install_data')
+        for project in list_doc_projects():
+            install_data_command.data_files.extend(
+                                    list_docs_data_files(project))
+
+        # make sure tvtk_classes.zip always get created before putting it
+        # in the install data.
         build_tvtk_classes_zip()
-        super().run()
+        tvtk_dir = 'tvtk'
+        install_data_command.data_files.append(
+            (tvtk_dir, [join(tvtk_dir, 'tvtk_classes.zip')]))
+
+        install_data.install_data.run(self)
+
+
+class MyClean(clean.clean):
+    """Reimplements to remove the extension module array_ext to guarantee a
+    fresh rebuild every time. The module hanging around could introduce
+    problems when doing develop for a different vtk version."""
+    def run(self):
+        MY_DIR = os.path.dirname(__file__)
+
+        ext_file = os.path.join(
+            MY_DIR,
+            "tvtk",
+            "array_ext" + (".pyd" if sys.platform == "win32" else ".so")
+        )
+
+        if os.path.exists(ext_file):
+            print("Removing in-place array extensions {}".format(ext_file))
+            os.unlink(ext_file)
+
+        clean.clean.run(self)
+
+
+# Configure our extensions to Python
+def configuration(parent_package=None, top_path=None):
+    from numpy.distutils.misc_util import Configuration
+    config = Configuration(None, parent_package, top_path)
+    config.set_options(
+        ignore_setup_xxx_py=True,
+        assume_default_configuration=True,
+        delegate_options_to_subpackages=True,
+        quiet=True,
+    )
+
+    config.add_subpackage('tvtk')
+    config.add_data_dir('mayavi/core/lut')
+    config.add_data_dir('mayavi/tests/data')
+    config.add_data_dir('mayavi/tests/csv_files')
+    config.add_data_dir('mayavi/tools/static')
+
+    # Image files.
+    for pkgdir in ('mayavi', 'tvtk'):
+        for root, dirs, files in os.walk(pkgdir):
+            if split(root)[-1] == 'images':
+                config.add_data_dir(root)
+
+    # *.ini files.
+    config.add_data_dir('tvtk/plugins/scene')
+    config.add_data_dir('mayavi/preferences')
+
+    return config
 
 
 ###########################################################################
@@ -273,14 +403,21 @@ for package, files in build_package_data.items():
     target_path = package.replace('.', os.sep)
     for filename in files:
         shutil.copy(filename, target_path)
+###########################################################################
 
-try:
-    import numpy as np
-except Exception:
-    HAS_NUMPY = False
+# Build the full set of packages by appending any found by setuptools'
+# find_packages to those discovered by numpy.distutils.
+if HAS_NUMPY:
+    config = configuration().todict()
 else:
-    HAS_NUMPY = True
-if not HAS_NUMPY and MODE != 'info':
+    # This is just a dummy so the egg_info command works.
+    config = {'packages': []}
+packages = setuptools.find_packages(exclude=config['packages'] +
+                                    ['docs', 'examples'])
+config['packages'] += packages
+
+
+if MODE != 'info' and not HAS_NUMPY:
     msg = '''
     Numpy is required to build Mayavi correctly, please install it first.
     '''
@@ -289,43 +426,16 @@ if not HAS_NUMPY and MODE != 'info':
     print('*'*80)
     raise RuntimeError(msg)
 
-###########################################################################
 
 # The actual setup call
 if __name__ == '__main__':
-    ext_modules = list()
-    packages = find_packages(exclude=["docs", "examples"])
-    packages += [  # otherwise we get warnings. Maybe these should be excluded?
-        "mayavi.core.images",
-        "mayavi.core.ui.images",
-        "mayavi.images",
-        "mayavi.preferences.images",
-        "mayavi.tests.csv_files",
-        "mayavi.tests.data",
-        "mayavi.tools.static.x3d",
-        "tvtk.pipeline.images",
-        "tvtk.pyface.images",
-        "tvtk.src",
-        "tvtk.tools.images",
-    ]
-    if can_compile_extensions():
-        import numpy as np
-        ext_modules.append(
-            Extension(
-                "tvtk.array_ext",
-                sources=[join("tvtk", "src", "array_ext.c")],
-                depends=[join("tvtk", "src", "array_ext.pyx")],
-                include_dirs=[np.get_include()],
-            )
-        )
-
     setup(
         name='mayavi',
         version=info['__version__'],
         author="Prabhu Ramachandran, et al.",
         author_email="prabhu@aero.iitb.ac.in",
         maintainer='ETS Developers',
-        python_requires='>=3.8',
+        python_requires='>=3.7',
         maintainer_email='mayavi-users@lists.sf.net',
         url='http://docs.enthought.com/mayavi/mayavi/',
         classifiers=[c.strip() for c in """\
@@ -345,8 +455,14 @@ if __name__ == '__main__':
             Topic :: Software Development :: Libraries
             """.splitlines() if len(c.split()) > 0],
         cmdclass={
-            'build_py': MyBuildPy,
+            # Work around a numpy distutils bug by forcing the use of the
+            # setuptools' sdist command.
+            'sdist': setuptools.command.sdist.sdist,
+            'build': MyBuild,
+            'build_src': MyBuildSrc,
+            'clean': MyClean,
             'develop': MyDevelop,
+            'install_data': MyInstallData,
             'gen_docs': GenDocs,
             'build_docs': BuildDocs,
             },
@@ -372,13 +488,11 @@ if __name__ == '__main__':
             ]
         },
         extras_require=info['__extras_require__'],
-        packages=packages,
         include_package_data=True,
-        package_data={"tvtk": ["tvtk_classes.zip"]},
-        ext_modules=ext_modules,
         install_requires=info['__requires__'],
         license="BSD",
-        long_description=Path('README.rst').read_text(encoding='utf-8'),
+        long_description=io.open('README.rst', encoding='utf-8').read(),
         platforms=["Windows", "Linux", "Mac OS-X", "Unix", "Solaris"],
         zip_safe=False,
+        **config
     )
diff --git a/tvtk/common.py b/tvtk/common.py
index bad08ce2..b5413583 100644
--- a/tvtk/common.py
+++ b/tvtk/common.py
@@ -10,7 +10,6 @@ import re
 import vtk
 
 vtk_major_version = vtk.vtkVersion.GetVTKMajorVersion()
-vtk_minor_version = vtk.vtkVersion.GetVTKMinorVersion()
 
 
 ######################################################################
@@ -50,21 +49,18 @@ def get_tvtk_name(vtk_name):
       'XMLDataReader'
 
     """
-    name = vtk_name
-    if name.startswith('vtk'):
-        name = name[3:]
-    return _sanitize_name(name)
-
-
-def _sanitize_name(name):
-    """Turn a VTK name (like a class or method def) into a valid Python var name."""
-    dig2name = {'1': 'One', '2': 'Two', '3': 'Three', '4': 'Four',
-                '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight',
-                '9': 'Nine', '0': 'Zero'}
-
-    if name[0].isdigit():
-        name = dig2name[name[0]] + name[1:]
-    return name
+    if vtk_name[:3] == 'vtk':
+        name = vtk_name[3:]
+        dig2name = {'1': 'One', '2': 'Two', '3': 'Three', '4': 'Four',
+                    '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight',
+                    '9': 'Nine', '0': 'Zero'}
+
+        if name[0] in string.digits:
+            return dig2name[name[0]] + name[1:]
+        else:
+            return name
+    else:
+        return vtk_name
 
 
 def is_version_9():
diff --git a/tvtk/pyface/ui/qt4/QVTKRenderWindowInteractor.py b/tvtk/pyface/ui/qt4/QVTKRenderWindowInteractor.py
index 5d125d8e..e00295e8 100644
--- a/tvtk/pyface/ui/qt4/QVTKRenderWindowInteractor.py
+++ b/tvtk/pyface/ui/qt4/QVTKRenderWindowInteractor.py
@@ -47,8 +47,6 @@ if qt_api == 'pyqt':
     PyQtImpl = "PyQt4"
 elif qt_api == 'pyqt5':
     PyQtImpl = "PyQt5"
-elif qt_api == 'pyqt6':
-    PyQtImpl = "PyQt6"
 elif qt_api == 'pyside2':
     PyQtImpl = "PySide2"
 elif qt_api == 'pyside6':
@@ -69,125 +67,56 @@ try:
 except (ImportError, AttributeError):
     pass
 
-# Check the compatibility of PyQtImpl and QVTKRWIBase
-if QVTKRWIBase != "QWidget":
-    if PyQtImpl in ["PySide6", "PyQt6"] and QVTKRWIBase == "QOpenGLWidget":
-        pass  # compatible
-    elif PyQtImpl in ["PyQt5", "PySide2","PyQt4", "PySide"] and QVTKRWIBase == "QGLWidget":
-        pass  # compatible
-    else:
-        raise ImportError("Cannot load " + QVTKRWIBase + " from " + PyQtImpl)
-
-if PyQtImpl == "PySide6":
-    if QVTKRWIBase == "QOpenGLWidget":
-        from PySide6.QtOpenGLWidgets import QOpenGLWidget
-    from PySide6.QtWidgets import QWidget
-    from PySide6.QtWidgets import QSizePolicy
-    from PySide6.QtWidgets import QApplication
-    from PySide6.QtWidgets import QMainWindow
-    from PySide6.QtGui import QCursor
-    from PySide6.QtCore import Qt
-    from PySide6.QtCore import QTimer
-    from PySide6.QtCore import QObject
-    from PySide6.QtCore import QSize
-    from PySide6.QtCore import QEvent
-elif PyQtImpl == "PyQt6":
-    if QVTKRWIBase == "QOpenGLWidget":
-        from PyQt6.QtOpenGLWidgets import QOpenGLWidget
-    from PyQt6.QtWidgets import QWidget
-    from PyQt6.QtWidgets import QSizePolicy
-    from PyQt6.QtWidgets import QApplication
-    from PyQt6.QtWidgets import QMainWindow
-    from PyQt6.QtGui import QCursor
-    from PyQt6.QtCore import Qt
-    from PyQt6.QtCore import QTimer
-    from PyQt6.QtCore import QObject
-    from PyQt6.QtCore import QSize
-    from PyQt6.QtCore import QEvent
-elif PyQtImpl == "PyQt5":
+if PyQtImpl == "PyQt5":
     if QVTKRWIBase == "QGLWidget":
-        from PyQt5.QtOpenGL import QGLWidget
-    from PyQt5.QtWidgets import QWidget
-    from PyQt5.QtWidgets import QSizePolicy
-    from PyQt5.QtWidgets import QApplication
-    from PyQt5.QtWidgets import QMainWindow
-    from PyQt5.QtGui import QCursor
-    from PyQt5.QtCore import Qt
-    from PyQt5.QtCore import QTimer
-    from PyQt5.QtCore import QObject
-    from PyQt5.QtCore import QSize
-    from PyQt5.QtCore import QEvent
-elif PyQtImpl == "PySide2":
-    if QVTKRWIBase == "QGLWidget":
-        from PySide2.QtOpenGL import QGLWidget
-    from PySide2.QtWidgets import QWidget
-    from PySide2.QtWidgets import QSizePolicy
-    from PySide2.QtWidgets import QApplication
-    from PySide2.QtWidgets import QMainWindow
-    from PySide2.QtGui import QCursor
-    from PySide2.QtCore import Qt
-    from PySide2.QtCore import QTimer
-    from PySide2.QtCore import QObject
-    from PySide2.QtCore import QSize
-    from PySide2.QtCore import QEvent
+        try:
+            from PyQt5.QtWidgets import QOpenGLWidget as QGLWidget
+        except:
+            from PyQt5.QtOpenGL import QGLWidget
+    from PyQt5.QtWidgets import QWidget, QSizePolicy, QApplication
+    from PyQt5.QtGui import QWheelEvent
+    from PyQt5.QtCore import Qt, QTimer, QObject, QSize, QEvent
 elif PyQtImpl == "PyQt4":
     if QVTKRWIBase == "QGLWidget":
         from PyQt4.QtOpenGL import QGLWidget
-    from PyQt4.QtGui import QWidget
-    from PyQt4.QtGui import QSizePolicy
-    from PyQt4.QtGui import QApplication
-    from PyQt4.QtGui import QMainWindow
-    from PyQt4.QtCore import Qt
-    from PyQt4.QtCore import QTimer
-    from PyQt4.QtCore import QObject
-    from PyQt4.QtCore import QSize
-    from PyQt4.QtCore import QEvent
+    from PyQt4.QtGui import QWidget, QSizePolicy, QApplication, QWheelEvent
+    from PyQt4.QtCore import Qt, QTimer, QObject, QSize, QEvent
 elif PyQtImpl == "PySide":
     if QVTKRWIBase == "QGLWidget":
         from PySide.QtOpenGL import QGLWidget
-    from PySide.QtGui import QWidget
-    from PySide.QtGui import QSizePolicy
-    from PySide.QtGui import QApplication
-    from PySide.QtGui import QMainWindow
-    from PySide.QtCore import Qt
-    from PySide.QtCore import QTimer
-    from PySide.QtCore import QObject
-    from PySide.QtCore import QSize
-    from PySide.QtCore import QEvent
+    from PySide.QtGui import QWidget, QSizePolicy, QApplication, QWheelEvent
+    from PySide.QtCore import Qt, QTimer, QObject, QSize, QEvent
+elif PyQtImpl == "PySide2":
+    if QVTKRWIBase == "QGLWidget":
+        try:
+            from PySide2.QtWidgets import QOpenGLWidget as QGLWidget
+        except:
+            from PySide2.QtOpenGL import QGLWidget
+    from PySide2.QtWidgets import QWidget, QSizePolicy, QApplication
+    from PySide2.QtGui import QWheelEvent
+    from PySide2.QtCore import Qt, QTimer, QObject, QSize, QEvent
+elif PyQtImpl == "PySide6":
+    if QVTKRWIBase == "QGLWidget":
+        try:
+            from PySide6.QtWidgets import QOpenGLWidget as QGLWidget
+        except:
+            from PySide6.QtOpenGL import QGLWidget
+    from PySide6.QtWidgets import QWidget, QSizePolicy, QApplication
+    from PySide6.QtGui import QWheelEvent
+    from PySide6.QtCore import Qt, QTimer, QObject, QSize, QEvent
 else:
     raise ImportError("Unknown PyQt implementation " + repr(PyQtImpl))
 
+
 # Define types for base class, based on string
 if QVTKRWIBase == "QWidget":
     QVTKRWIBaseClass = QWidget
 elif QVTKRWIBase == "QGLWidget":
     QVTKRWIBaseClass = QGLWidget
-elif QVTKRWIBase == "QOpenGLWidget":
-    QVTKRWIBaseClass = QOpenGLWidget
-else:
-    raise ImportError("Unknown base class for QVTKRenderWindowInteractor " + QVTKRWIBase)
-
-if PyQtImpl == 'PyQt6':
-    CursorShape = Qt.CursorShape
-    MouseButton = Qt.MouseButton
-    WindowType = Qt.WindowType
-    WidgetAttribute = Qt.WidgetAttribute
-    KeyboardModifier = Qt.KeyboardModifier
-    FocusPolicy = Qt.FocusPolicy
-    ConnectionType = Qt.ConnectionType
-    Key = Qt.Key
-    SizePolicy = QSizePolicy.Policy
-    EventType = QEvent.Type
-else:
-    CursorShape = MouseButton = WindowType = WidgetAttribute = \
-        KeyboardModifier = FocusPolicy = ConnectionType = Key = Qt
-    SizePolicy = QSizePolicy
-    EventType = QEvent
-
-if PyQtImpl in ('PyQt4', 'PySide'):
-    MiddleButton = MouseButton.MidButton
 else:
-    MiddleButton = MouseButton.MiddleButton
+    raise ImportError(
+        "Unknown base class for QVTKRenderWindowInteractor " + QVTKRWIBase
+    )
 
 
 class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
@@ -261,28 +190,28 @@ class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
 
     # Map between VTK and Qt cursors.
     _CURSOR_MAP = {
-        0:  CursorShape.ArrowCursor,          # VTK_CURSOR_DEFAULT
-        1:  CursorShape.ArrowCursor,          # VTK_CURSOR_ARROW
-        2:  CursorShape.SizeBDiagCursor,      # VTK_CURSOR_SIZENE
-        3:  CursorShape.SizeFDiagCursor,      # VTK_CURSOR_SIZENWSE
-        4:  CursorShape.SizeBDiagCursor,      # VTK_CURSOR_SIZESW
-        5:  CursorShape.SizeFDiagCursor,      # VTK_CURSOR_SIZESE
-        6:  CursorShape.SizeVerCursor,        # VTK_CURSOR_SIZENS
-        7:  CursorShape.SizeHorCursor,        # VTK_CURSOR_SIZEWE
-        8:  CursorShape.SizeAllCursor,        # VTK_CURSOR_SIZEALL
-        9:  CursorShape.PointingHandCursor,   # VTK_CURSOR_HAND
-        10: CursorShape.CrossCursor,          # VTK_CURSOR_CROSSHAIR
+        0:  Qt.ArrowCursor,          # VTK_CURSOR_DEFAULT
+        1:  Qt.ArrowCursor,          # VTK_CURSOR_ARROW
+        2:  Qt.SizeBDiagCursor,      # VTK_CURSOR_SIZENE
+        3:  Qt.SizeFDiagCursor,      # VTK_CURSOR_SIZENWSE
+        4:  Qt.SizeBDiagCursor,      # VTK_CURSOR_SIZESW
+        5:  Qt.SizeFDiagCursor,      # VTK_CURSOR_SIZESE
+        6:  Qt.SizeVerCursor,        # VTK_CURSOR_SIZENS
+        7:  Qt.SizeHorCursor,        # VTK_CURSOR_SIZEWE
+        8:  Qt.SizeAllCursor,        # VTK_CURSOR_SIZEALL
+        9:  Qt.PointingHandCursor,   # VTK_CURSOR_HAND
+        10: Qt.CrossCursor,          # VTK_CURSOR_CROSSHAIR
     }
 
     def __init__(self, parent=None, **kw):
         # the current button
-        self._ActiveButton = MouseButton.NoButton
+        self._ActiveButton = Qt.NoButton
 
         # private attributes
         self.__saveX = 0
         self.__saveY = 0
-        self.__saveModifiers = KeyboardModifier.NoModifier
-        self.__saveButtons = MouseButton.NoButton
+        self.__saveModifiers = Qt.NoModifier
+        self.__saveButtons = Qt.NoButton
         self.__wheelDelta = 0
 
         # do special handling of some keywords:
@@ -298,17 +227,15 @@ class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
         except KeyError:
             rw = None
 
-        # create base qt-level widget
+        # create qt-level widget
         if QVTKRWIBase == "QWidget":
             if "wflags" in kw:
                 wflags = kw['wflags']
             else:
-                wflags = WindowType.Widget  # what Qt.WindowFlags() returns (0)
-            QWidget.__init__(self, parent, wflags | WindowType.MSWindowsOwnDC)
+                wflags = Qt.WindowFlags()
+            QWidget.__init__(self, parent, wflags | Qt.MSWindowsOwnDC)
         elif QVTKRWIBase == "QGLWidget":
             QGLWidget.__init__(self, parent)
-        elif QVTKRWIBase == "QOpenGLWidget":
-            QOpenGLWidget.__init__(self, parent)
 
         if rw:  # user-supplied render window
             self._RenderWindow = rw
@@ -337,11 +264,11 @@ class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
             self._pixel_ratio = 1.0
 
         # do all the necessary qt setup
-        self.setAttribute(WidgetAttribute.WA_OpaquePaintEvent)
-        self.setAttribute(WidgetAttribute.WA_PaintOnScreen)
+        self.setAttribute(Qt.WA_OpaquePaintEvent)
+        self.setAttribute(Qt.WA_PaintOnScreen)
         self.setMouseTracking(True) # get all mouse events
-        self.setFocusPolicy(FocusPolicy.WheelFocus)
-        self.setSizePolicy(QSizePolicy(SizePolicy.Expanding, SizePolicy.Expanding))
+        self.setFocusPolicy(Qt.WheelFocus)
+        self.setSizePolicy(QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding))
 
         self._Timer = QTimer(self)
         self._Timer.timeout.connect(self.TimerEvent)
@@ -433,12 +360,12 @@ class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
 
     def HideCursor(self):
         """Hides the cursor."""
-        self.setCursor(CursorShape.BlankCursor)
+        self.setCursor(Qt.BlankCursor)
 
     def ShowCursor(self):
         """Shows the cursor."""
         vtk_cursor = self._Iren.GetRenderWindow().GetCurrentCursor()
-        qt_cursor = self._CURSOR_MAP.get(vtk_cursor, CursorShape.ArrowCursor)
+        qt_cursor = self._CURSOR_MAP.get(vtk_cursor, Qt.ArrowCursor)
         self.setCursor(qt_cursor)
 
     def closeEvent(self, evt):
@@ -480,14 +407,14 @@ class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
         ctrl = shift = False
 
         if hasattr(ev, 'modifiers'):
-            if ev.modifiers() & KeyboardModifier.ShiftModifier:
+            if ev.modifiers() & Qt.ShiftModifier:
                 shift = True
-            if ev.modifiers() & KeyboardModifier.ControlModifier:
+            if ev.modifiers() & Qt.ControlModifier:
                 ctrl = True
         else:
-            if self.__saveModifiers & KeyboardModifier.ShiftModifier:
+            if self.__saveModifiers & Qt.ShiftModifier:
                 shift = True
-            if self.__saveModifiers & KeyboardModifier.ControlModifier:
+            if self.__saveModifiers & Qt.ControlModifier:
                 ctrl = True
 
         return ctrl, shift
@@ -507,7 +434,7 @@ class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
     def mousePressEvent(self, ev):
         ctrl, shift = self._GetCtrlShift(ev)
         repeat = 0
-        if ev.type() == EventType.MouseButtonDblClick:
+        if ev.type() == QEvent.MouseButtonDblClick:
             repeat = 1
 
         pxr = self._pixel_ratio
@@ -516,11 +443,11 @@ class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
 
         self._ActiveButton = ev.button()
 
-        if self._ActiveButton == MouseButton.LeftButton:
+        if self._ActiveButton == Qt.LeftButton:
             self._Iren.LeftButtonPressEvent()
-        elif self._ActiveButton == MouseButton.RightButton:
+        elif self._ActiveButton == Qt.RightButton:
             self._Iren.RightButtonPressEvent()
-        elif self._ActiveButton == MiddleButton:
+        elif self._ActiveButton == Qt.MidButton:
             self._Iren.MiddleButtonPressEvent()
 
     def mouseReleaseEvent(self, ev):
@@ -529,11 +456,11 @@ class QVTKRenderWindowInteractor(QVTKRWIBaseClass):
         self._Iren.SetEventInformationFlipY(int(ev.x()*pxr), int(ev.y()*pxr),
                                             ctrl, shift, chr(0), 0, None)
 
-        if self._ActiveButton == MouseButton.LeftButton:
+        if self._ActiveButton == Qt.LeftButton:
             self._Iren.LeftButtonReleaseEvent()
-        elif self._ActiveButton == MouseButton.RightButton:
+        elif self._ActiveButton == Qt.RightButton:
             self._Iren.RightButtonReleaseEvent()
-        elif self._ActiveButton == MiddleButton:
+        elif self._ActiveButton == Qt.MidButton:
             self._Iren.MiddleButtonReleaseEvent()
 
     def mouseMoveEvent(self, ev):
@@ -678,98 +605,98 @@ def QVTKRenderWidgetConeExample():
 
 
 _keysyms = {
-    Key.Key_Backspace: 'BackSpace',
-    Key.Key_Tab: 'Tab',
-    Key.Key_Backtab: 'Tab',
-    # Key.Key_Clear : 'Clear',
-    Key.Key_Return: 'Return',
-    Key.Key_Enter: 'Return',
-    Key.Key_Shift: 'Shift_L',
-    Key.Key_Control: 'Control_L',
-    Key.Key_Alt: 'Alt_L',
-    Key.Key_Pause: 'Pause',
-    Key.Key_CapsLock: 'Caps_Lock',
-    Key.Key_Escape: 'Escape',
-    Key.Key_Space: 'space',
-    # Key.Key_Prior : 'Prior',
-    # Key.Key_Next : 'Next',
-    Key.Key_End: 'End',
-    Key.Key_Home: 'Home',
-    Key.Key_Left: 'Left',
-    Key.Key_Up: 'Up',
-    Key.Key_Right: 'Right',
-    Key.Key_Down: 'Down',
-    Key.Key_SysReq: 'Snapshot',
-    Key.Key_Insert: 'Insert',
-    Key.Key_Delete: 'Delete',
-    Key.Key_Help: 'Help',
-    Key.Key_0: '0',
-    Key.Key_1: '1',
-    Key.Key_2: '2',
-    Key.Key_3: '3',
-    Key.Key_4: '4',
-    Key.Key_5: '5',
-    Key.Key_6: '6',
-    Key.Key_7: '7',
-    Key.Key_8: '8',
-    Key.Key_9: '9',
-    Key.Key_A: 'a',
-    Key.Key_B: 'b',
-    Key.Key_C: 'c',
-    Key.Key_D: 'd',
-    Key.Key_E: 'e',
-    Key.Key_F: 'f',
-    Key.Key_G: 'g',
-    Key.Key_H: 'h',
-    Key.Key_I: 'i',
-    Key.Key_J: 'j',
-    Key.Key_K: 'k',
-    Key.Key_L: 'l',
-    Key.Key_M: 'm',
-    Key.Key_N: 'n',
-    Key.Key_O: 'o',
-    Key.Key_P: 'p',
-    Key.Key_Q: 'q',
-    Key.Key_R: 'r',
-    Key.Key_S: 's',
-    Key.Key_T: 't',
-    Key.Key_U: 'u',
-    Key.Key_V: 'v',
-    Key.Key_W: 'w',
-    Key.Key_X: 'x',
-    Key.Key_Y: 'y',
-    Key.Key_Z: 'z',
-    Key.Key_Asterisk: 'asterisk',
-    Key.Key_Plus: 'plus',
-    Key.Key_Minus: 'minus',
-    Key.Key_Period: 'period',
-    Key.Key_Slash: 'slash',
-    Key.Key_F1: 'F1',
-    Key.Key_F2: 'F2',
-    Key.Key_F3: 'F3',
-    Key.Key_F4: 'F4',
-    Key.Key_F5: 'F5',
-    Key.Key_F6: 'F6',
-    Key.Key_F7: 'F7',
-    Key.Key_F8: 'F8',
-    Key.Key_F9: 'F9',
-    Key.Key_F10: 'F10',
-    Key.Key_F11: 'F11',
-    Key.Key_F12: 'F12',
-    Key.Key_F13: 'F13',
-    Key.Key_F14: 'F14',
-    Key.Key_F15: 'F15',
-    Key.Key_F16: 'F16',
-    Key.Key_F17: 'F17',
-    Key.Key_F18: 'F18',
-    Key.Key_F19: 'F19',
-    Key.Key_F20: 'F20',
-    Key.Key_F21: 'F21',
-    Key.Key_F22: 'F22',
-    Key.Key_F23: 'F23',
-    Key.Key_F24: 'F24',
-    Key.Key_NumLock: 'Num_Lock',
-    Key.Key_ScrollLock: 'Scroll_Lock',
+    Qt.Key_Backspace: 'BackSpace',
+    Qt.Key_Tab: 'Tab',
+    Qt.Key_Backtab: 'Tab',
+    # Qt.Key_Clear : 'Clear',
+    Qt.Key_Return: 'Return',
+    Qt.Key_Enter: 'Return',
+    Qt.Key_Shift: 'Shift_L',
+    Qt.Key_Control: 'Control_L',
+    Qt.Key_Alt: 'Alt_L',
+    Qt.Key_Pause: 'Pause',
+    Qt.Key_CapsLock: 'Caps_Lock',
+    Qt.Key_Escape: 'Escape',
+    Qt.Key_Space: 'space',
+    # Qt.Key_Prior : 'Prior',
+    # Qt.Key_Next : 'Next',
+    Qt.Key_End: 'End',
+    Qt.Key_Home: 'Home',
+    Qt.Key_Left: 'Left',
+    Qt.Key_Up: 'Up',
+    Qt.Key_Right: 'Right',
+    Qt.Key_Down: 'Down',
+    Qt.Key_SysReq: 'Snapshot',
+    Qt.Key_Insert: 'Insert',
+    Qt.Key_Delete: 'Delete',
+    Qt.Key_Help: 'Help',
+    Qt.Key_0: '0',
+    Qt.Key_1: '1',
+    Qt.Key_2: '2',
+    Qt.Key_3: '3',
+    Qt.Key_4: '4',
+    Qt.Key_5: '5',
+    Qt.Key_6: '6',
+    Qt.Key_7: '7',
+    Qt.Key_8: '8',
+    Qt.Key_9: '9',
+    Qt.Key_A: 'a',
+    Qt.Key_B: 'b',
+    Qt.Key_C: 'c',
+    Qt.Key_D: 'd',
+    Qt.Key_E: 'e',
+    Qt.Key_F: 'f',
+    Qt.Key_G: 'g',
+    Qt.Key_H: 'h',
+    Qt.Key_I: 'i',
+    Qt.Key_J: 'j',
+    Qt.Key_K: 'k',
+    Qt.Key_L: 'l',
+    Qt.Key_M: 'm',
+    Qt.Key_N: 'n',
+    Qt.Key_O: 'o',
+    Qt.Key_P: 'p',
+    Qt.Key_Q: 'q',
+    Qt.Key_R: 'r',
+    Qt.Key_S: 's',
+    Qt.Key_T: 't',
+    Qt.Key_U: 'u',
+    Qt.Key_V: 'v',
+    Qt.Key_W: 'w',
+    Qt.Key_X: 'x',
+    Qt.Key_Y: 'y',
+    Qt.Key_Z: 'z',
+    Qt.Key_Asterisk: 'asterisk',
+    Qt.Key_Plus: 'plus',
+    Qt.Key_Minus: 'minus',
+    Qt.Key_Period: 'period',
+    Qt.Key_Slash: 'slash',
+    Qt.Key_F1: 'F1',
+    Qt.Key_F2: 'F2',
+    Qt.Key_F3: 'F3',
+    Qt.Key_F4: 'F4',
+    Qt.Key_F5: 'F5',
+    Qt.Key_F6: 'F6',
+    Qt.Key_F7: 'F7',
+    Qt.Key_F8: 'F8',
+    Qt.Key_F9: 'F9',
+    Qt.Key_F10: 'F10',
+    Qt.Key_F11: 'F11',
+    Qt.Key_F12: 'F12',
+    Qt.Key_F13: 'F13',
+    Qt.Key_F14: 'F14',
+    Qt.Key_F15: 'F15',
+    Qt.Key_F16: 'F16',
+    Qt.Key_F17: 'F17',
+    Qt.Key_F18: 'F18',
+    Qt.Key_F19: 'F19',
+    Qt.Key_F20: 'F20',
+    Qt.Key_F21: 'F21',
+    Qt.Key_F22: 'F22',
+    Qt.Key_F23: 'F23',
+    Qt.Key_F24: 'F24',
+    Qt.Key_NumLock: 'Num_Lock',
+    Qt.Key_ScrollLock: 'Scroll_Lock',
     }
 
 
diff --git a/tvtk/pyface/ui/qt4/scene.py b/tvtk/pyface/ui/qt4/scene.py
index 3b9ab1ce..7f9675e7 100644
--- a/tvtk/pyface/ui/qt4/scene.py
+++ b/tvtk/pyface/ui/qt4/scene.py
@@ -37,12 +37,7 @@ from tvtk.pyface import light_manager
 from tvtk.pyface.utils import popup_save
 from tvtk.pyface.tvtk_scene import TVTKScene
 
-from .QVTKRenderWindowInteractor import (
-    QVTKRenderWindowInteractor,
-    CursorShape,
-    Key,
-    KeyboardModifier,
-)
+from .QVTKRenderWindowInteractor import QVTKRenderWindowInteractor
 
 
 ######################################################################
@@ -96,38 +91,38 @@ class _VTKRenderWindowInteractor(QVTKRenderWindowInteractor):
         scene = self._scene
         camera = scene.camera
 
-        if key in [Key.Key_Minus]:
+        if key in [QtCore.Qt.Key_Minus]:
             camera.zoom(0.8)
             scene.render()
             scene._record_methods('camera.zoom(0.8)\nrender()')
             return
 
-        if key in [Key.Key_Equal, Key.Key_Plus]:
+        if key in [QtCore.Qt.Key_Equal, QtCore.Qt.Key_Plus]:
             camera.zoom(1.25)
             scene.render()
             scene._record_methods('camera.zoom(1.25)\nrender()')
             return
 
-        if key in [Key.Key_E, Key.Key_Q, Key.Key_Escape]:
+        if key in [QtCore.Qt.Key_E, QtCore.Qt.Key_Q, QtCore.Qt.Key_Escape]:
             scene._disable_fullscreen()
             scene.picker.close_picker()
             return
 
-        if key in [Key.Key_W]:
+        if key in [QtCore.Qt.Key_W]:
             return
 
-        if key in [Key.Key_R]:
+        if key in [QtCore.Qt.Key_R]:
             scene._record_methods('reset_zoom()')
             return
 
-        if key in [Key.Key_P] and modifiers == KeyboardModifier.NoModifier:
+        if key in [QtCore.Qt.Key_P] and modifiers == QtCore.Qt.NoModifier:
             pos = self.mapFromGlobal(QtGui.QCursor.pos())
             x = pos.x()
             y = self.height() - pos.y()
             scene.picker.pick(x*self._pixel_ratio, y*self._pixel_ratio)
             return
 
-        if key in [Key.Key_F] and modifiers == KeyboardModifier.NoModifier:
+        if key in [QtCore.Qt.Key_F] and modifiers == QtCore.Qt.NoModifier:
             pos = self.mapFromGlobal(QtGui.QCursor.pos())
             x = pos.x()
             y = self.height() - pos.y()
@@ -140,19 +135,19 @@ class _VTKRenderWindowInteractor(QVTKRenderWindowInteractor):
                                       'render()'%list(coord))
             return
 
-        if key in [Key.Key_L] and modifiers == KeyboardModifier.NoModifier:
+        if key in [QtCore.Qt.Key_L] and modifiers == QtCore.Qt.NoModifier:
             scene.light_manager.configure()
             return
 
-        if key in [Key.Key_S] and modifiers == KeyboardModifier.NoModifier:
+        if key in [QtCore.Qt.Key_S] and modifiers == QtCore.Qt.NoModifier:
             fname = popup_save(self.parent())
             if len(fname) != 0:
                 self._scene.save(fname)
             return
 
-        shift = ((modifiers & KeyboardModifier.ShiftModifier) == KeyboardModifier.ShiftModifier)
+        shift = ((modifiers & QtCore.Qt.ShiftModifier) == QtCore.Qt.ShiftModifier)
 
-        if key == Key.Key_Left:
+        if key == QtCore.Qt.Key_Left:
             if shift:
                 camera.yaw(-5)
                 scene._record_methods('camera.yaw(-5)')
@@ -164,7 +159,7 @@ class _VTKRenderWindowInteractor(QVTKRenderWindowInteractor):
             scene._record_methods('render()')
             return
 
-        if key == Key.Key_Right:
+        if key == QtCore.Qt.Key_Right:
             if shift:
                 camera.yaw(5)
                 scene._record_methods('camera.yaw(5)')
@@ -176,7 +171,7 @@ class _VTKRenderWindowInteractor(QVTKRenderWindowInteractor):
             scene._record_methods('render()')
             return
 
-        if key == Key.Key_Up:
+        if key == QtCore.Qt.Key_Up:
             if shift:
                 camera.pitch(-5)
                 scene._record_methods('camera.pitch(-5)')
@@ -189,7 +184,7 @@ class _VTKRenderWindowInteractor(QVTKRenderWindowInteractor):
             scene._record_methods('camera.orthogonalize_view_up()\nrender()')
             return
 
-        if key == Key.Key_Down:
+        if key == QtCore.Qt.Key_Down:
             if shift:
                 camera.pitch(5)
                 scene._record_methods('camera.pitch(5)')
@@ -336,7 +331,7 @@ class Scene(TVTKScene, Widget):
         # The light manager needs creating.
         self.light_manager = None
 
-        self._cursor = CursorShape.ArrowCursor
+        self._cursor = QtCore.Qt.ArrowCursor
 
     def __get_pure_state__(self):
         """Allows us to pickle the scene."""
@@ -369,7 +364,7 @@ class Scene(TVTKScene, Widget):
     def hide_cursor(self):
         """Hide the cursor."""
         self._cursor = self._vtk_control.cursor().shape()
-        self._vtk_control.setCursor(CursorShape.BlankCursor)
+        self._vtk_control.setCursor(QtCore.Qt.BlankCursor)
 
     def show_cursor(self):
         """Show the cursor."""
diff --git a/tvtk/_setup.py b/tvtk/setup.py
similarity index 57%
rename from tvtk/_setup.py
rename to tvtk/setup.py
index 767ab638..0531134c 100755
--- a/tvtk/_setup.py
+++ b/tvtk/setup.py
@@ -6,14 +6,10 @@
 import os
 import sys
 
-from setuptools import Distribution
-
 
 def can_compile_extensions():
-    try:
-        import numpy  # noqa
-    except Exception:
-        return False  # our extension needs numpy/arrayobject.h
+    from distutils.dist import Distribution
+    from distutils.errors import DistutilsError
     sargs = {'script_name': None, 'script_args': ["--build-ext"]}
     d = Distribution(sargs)
     cfg = d.get_command_obj('config')
@@ -29,13 +25,57 @@ def can_compile_extensions():
             include_dirs=build_ext.include_dirs,
             lang='c'
         )
-    except Exception as exc:
-        print(f"Compilation failed, assuming no C compiler: {exc}")
+    except DistutilsError:
         return False
     else:
         return result
 
 
+def configuration(parent_package=None, top_path=None):
+    from os.path import join
+    from numpy.distutils.misc_util import Configuration
+    config = Configuration('tvtk', parent_package, top_path)
+    config.set_options(ignore_setup_xxx_py=True,
+                       assume_default_configuration=True,
+                       delegate_options_to_subpackages=True,
+                       quiet=True)
+
+    config.add_subpackage('custom')
+    config.add_subpackage('pipeline')
+    config.add_subpackage('pyface')
+    config.add_subpackage('pyface.*')
+    config.add_subpackage('pyface.*.*')
+    config.add_subpackage('view')
+
+    config.add_data_dir('pipeline/images')
+    config.add_data_dir('pyface/images')
+    config.add_data_dir('tools/images')
+
+    config.add_subpackage('plugins')
+    config.add_subpackage('plugins.*')
+    config.add_subpackage('plugins.*.*')
+
+    config.add_subpackage('tools')
+    config.add_subpackage('util')
+
+    config.add_subpackage('tests')
+
+    # Add any extensions.  These are optional.
+    if can_compile_extensions():
+        config.add_extension(
+            'array_ext',
+            sources=[join('src', 'array_ext.c')],
+            depends=[join('src', 'array_ext.pyx')],
+        )
+
+    tvtk_classes_zip_depends = config.paths(
+        'code_gen.py', 'wrapper_gen.py', 'special_gen.py',
+        'tvtk_base.py', 'indenter.py', 'vtk_parser.py'
+    )
+
+    return config
+
+
 def gen_tvtk_classes_zip():
     MY_DIR = os.path.dirname(__file__)
     sys.path.append(MY_DIR)
diff --git a/tvtk/src/array_ext.c b/tvtk/src/array_ext.c
index cad4766b..628e4f04 100644
--- a/tvtk/src/array_ext.c
+++ b/tvtk/src/array_ext.c
@@ -741,16 +741,7 @@ static CYTHON_INLINE float __PYX_NAN() {
 #define __PYX_HAVE__array_ext
 #define __PYX_HAVE_API__array_ext
 /* Early includes */
-#include <string.h>
-#include <stdio.h>
 #include "numpy/arrayobject.h"
-#include "numpy/ndarrayobject.h"
-#include "numpy/ndarraytypes.h"
-#include "numpy/arrayscalars.h"
-#include "numpy/ufuncobject.h"
-
-    /* NumPy API declarations from "numpy/__init__.pxd" */
-    
 #ifdef _OPENMP
 #include <omp.h>
 #endif /* _OPENMP */
@@ -958,268 +949,13 @@ static int __pyx_clineno = 0;
 static const char * __pyx_cfilenm= __FILE__;
 static const char *__pyx_filename;
 
-/* Header.proto */
-#if !defined(CYTHON_CCOMPLEX)
-  #if defined(__cplusplus)
-    #define CYTHON_CCOMPLEX 1
-  #elif defined(_Complex_I)
-    #define CYTHON_CCOMPLEX 1
-  #else
-    #define CYTHON_CCOMPLEX 0
-  #endif
-#endif
-#if CYTHON_CCOMPLEX
-  #ifdef __cplusplus
-    #include <complex>
-  #else
-    #include <complex.h>
-  #endif
-#endif
-#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
-  #undef _Complex_I
-  #define _Complex_I 1.0fj
-#endif
-
 
 static const char *__pyx_f[] = {
-  "array_ext.pyx",
-  "__init__.pxd",
-  "type.pxd",
+  "tvtk/src/array_ext.pyx",
 };
 
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":680
- * # in Cython to enable them only on the right systems.
- * 
- * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
- * ctypedef npy_int16      int16_t
- * ctypedef npy_int32      int32_t
- */
-typedef npy_int8 __pyx_t_5numpy_int8_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":681
- * 
- * ctypedef npy_int8       int8_t
- * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
- * ctypedef npy_int32      int32_t
- * ctypedef npy_int64      int64_t
- */
-typedef npy_int16 __pyx_t_5numpy_int16_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":682
- * ctypedef npy_int8       int8_t
- * ctypedef npy_int16      int16_t
- * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
- * ctypedef npy_int64      int64_t
- * #ctypedef npy_int96      int96_t
- */
-typedef npy_int32 __pyx_t_5numpy_int32_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":683
- * ctypedef npy_int16      int16_t
- * ctypedef npy_int32      int32_t
- * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
- * #ctypedef npy_int96      int96_t
- * #ctypedef npy_int128     int128_t
- */
-typedef npy_int64 __pyx_t_5numpy_int64_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":687
- * #ctypedef npy_int128     int128_t
- * 
- * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
- * ctypedef npy_uint16     uint16_t
- * ctypedef npy_uint32     uint32_t
- */
-typedef npy_uint8 __pyx_t_5numpy_uint8_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":688
- * 
- * ctypedef npy_uint8      uint8_t
- * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
- * ctypedef npy_uint32     uint32_t
- * ctypedef npy_uint64     uint64_t
- */
-typedef npy_uint16 __pyx_t_5numpy_uint16_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":689
- * ctypedef npy_uint8      uint8_t
- * ctypedef npy_uint16     uint16_t
- * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
- * ctypedef npy_uint64     uint64_t
- * #ctypedef npy_uint96     uint96_t
- */
-typedef npy_uint32 __pyx_t_5numpy_uint32_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":690
- * ctypedef npy_uint16     uint16_t
- * ctypedef npy_uint32     uint32_t
- * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
- * #ctypedef npy_uint96     uint96_t
- * #ctypedef npy_uint128    uint128_t
- */
-typedef npy_uint64 __pyx_t_5numpy_uint64_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":694
- * #ctypedef npy_uint128    uint128_t
- * 
- * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
- * ctypedef npy_float64    float64_t
- * #ctypedef npy_float80    float80_t
- */
-typedef npy_float32 __pyx_t_5numpy_float32_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":695
- * 
- * ctypedef npy_float32    float32_t
- * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
- * #ctypedef npy_float80    float80_t
- * #ctypedef npy_float128   float128_t
- */
-typedef npy_float64 __pyx_t_5numpy_float64_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":704
- * # The int types are mapped a bit surprising --
- * # numpy.int corresponds to 'l' and numpy.long to 'q'
- * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
- * ctypedef npy_longlong   longlong_t
- * 
- */
-typedef npy_long __pyx_t_5numpy_int_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":705
- * # numpy.int corresponds to 'l' and numpy.long to 'q'
- * ctypedef npy_long       int_t
- * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
- * 
- * ctypedef npy_ulong      uint_t
- */
-typedef npy_longlong __pyx_t_5numpy_longlong_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":707
- * ctypedef npy_longlong   longlong_t
- * 
- * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
- * ctypedef npy_ulonglong  ulonglong_t
- * 
- */
-typedef npy_ulong __pyx_t_5numpy_uint_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":708
- * 
- * ctypedef npy_ulong      uint_t
- * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
- * 
- * ctypedef npy_intp       intp_t
- */
-typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":710
- * ctypedef npy_ulonglong  ulonglong_t
- * 
- * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
- * ctypedef npy_uintp      uintp_t
- * 
- */
-typedef npy_intp __pyx_t_5numpy_intp_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":711
- * 
- * ctypedef npy_intp       intp_t
- * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
- * 
- * ctypedef npy_double     float_t
- */
-typedef npy_uintp __pyx_t_5numpy_uintp_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":713
- * ctypedef npy_uintp      uintp_t
- * 
- * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
- * ctypedef npy_double     double_t
- * ctypedef npy_longdouble longdouble_t
- */
-typedef npy_double __pyx_t_5numpy_float_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":714
- * 
- * ctypedef npy_double     float_t
- * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
- * ctypedef npy_longdouble longdouble_t
- * 
- */
-typedef npy_double __pyx_t_5numpy_double_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":715
- * ctypedef npy_double     float_t
- * ctypedef npy_double     double_t
- * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
- * 
- * ctypedef npy_cfloat      cfloat_t
- */
-typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
-/* Declarations.proto */
-#if CYTHON_CCOMPLEX
-  #ifdef __cplusplus
-    typedef ::std::complex< float > __pyx_t_float_complex;
-  #else
-    typedef float _Complex __pyx_t_float_complex;
-  #endif
-#else
-    typedef struct { float real, imag; } __pyx_t_float_complex;
-#endif
-static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);
-
-/* Declarations.proto */
-#if CYTHON_CCOMPLEX
-  #ifdef __cplusplus
-    typedef ::std::complex< double > __pyx_t_double_complex;
-  #else
-    typedef double _Complex __pyx_t_double_complex;
-  #endif
-#else
-    typedef struct { double real, imag; } __pyx_t_double_complex;
-#endif
-static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);
-
-
 /*--- Type declarations ---*/
 
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":717
- * ctypedef npy_longdouble longdouble_t
- * 
- * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
- * ctypedef npy_cdouble     cdouble_t
- * ctypedef npy_clongdouble clongdouble_t
- */
-typedef npy_cfloat __pyx_t_5numpy_cfloat_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":718
- * 
- * ctypedef npy_cfloat      cfloat_t
- * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
- * ctypedef npy_clongdouble clongdouble_t
- * 
- */
-typedef npy_cdouble __pyx_t_5numpy_cdouble_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":719
- * ctypedef npy_cfloat      cfloat_t
- * ctypedef npy_cdouble     cdouble_t
- * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
- * 
- * ctypedef npy_cdouble     complex_t
- */
-typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":721
- * ctypedef npy_clongdouble clongdouble_t
- * 
- * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
- * 
- * cdef inline object PyArray_MultiIterNew1(a):
- */
-typedef npy_cdouble __pyx_t_5numpy_complex_t;
-
 /* --- Runtime support code (head) --- */
 /* Refnanny.proto */
 #ifndef CYTHON_REFNANNY
@@ -1505,43 +1241,6 @@ static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject
 /* RaiseException.proto */
 static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);
 
-/* WriteUnraisableException.proto */
-static void __Pyx_WriteUnraisable(const char *name, int clineno,
-                                  int lineno, const char *filename,
-                                  int full_traceback, int nogil);
-
-/* GetTopmostException.proto */
-#if CYTHON_USE_EXC_INFO_STACK
-static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
-#endif
-
-/* SaveResetException.proto */
-#if CYTHON_FAST_THREAD_STATE
-#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
-static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
-#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
-static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
-#else
-#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
-#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
-#endif
-
-/* PyErrExceptionMatches.proto */
-#if CYTHON_FAST_THREAD_STATE
-#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
-static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
-#else
-#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
-#endif
-
-/* GetException.proto */
-#if CYTHON_FAST_THREAD_STATE
-#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
-static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
-#else
-static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
-#endif
-
 /* TypeImport.proto */
 #ifndef __PYX_HAVE_RT_ImportType_proto
 #define __PYX_HAVE_RT_ImportType_proto
@@ -1584,104 +1283,6 @@ static void __Pyx_AddTraceback(const char *funcname, int c_line,
 #define __Pyx_HAS_GCC_DIAGNOSTIC
 #endif
 
-/* RealImag.proto */
-#if CYTHON_CCOMPLEX
-  #ifdef __cplusplus
-    #define __Pyx_CREAL(z) ((z).real())
-    #define __Pyx_CIMAG(z) ((z).imag())
-  #else
-    #define __Pyx_CREAL(z) (__real__(z))
-    #define __Pyx_CIMAG(z) (__imag__(z))
-  #endif
-#else
-    #define __Pyx_CREAL(z) ((z).real)
-    #define __Pyx_CIMAG(z) ((z).imag)
-#endif
-#if defined(__cplusplus) && CYTHON_CCOMPLEX\
-        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
-    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
-    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
-#else
-    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
-    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
-#endif
-
-/* Arithmetic.proto */
-#if CYTHON_CCOMPLEX
-    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
-    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
-    #define __Pyx_c_diff_float(a, b) ((a)-(b))
-    #define __Pyx_c_prod_float(a, b) ((a)*(b))
-    #define __Pyx_c_quot_float(a, b) ((a)/(b))
-    #define __Pyx_c_neg_float(a)     (-(a))
-  #ifdef __cplusplus
-    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
-    #define __Pyx_c_conj_float(z)    (::std::conj(z))
-    #if 1
-        #define __Pyx_c_abs_float(z)     (::std::abs(z))
-        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
-    #endif
-  #else
-    #define __Pyx_c_is_zero_float(z) ((z)==0)
-    #define __Pyx_c_conj_float(z)    (conjf(z))
-    #if 1
-        #define __Pyx_c_abs_float(z)     (cabsf(z))
-        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
-    #endif
- #endif
-#else
-    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
-    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
-    #if 1
-        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
-        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
-    #endif
-#endif
-
-/* Arithmetic.proto */
-#if CYTHON_CCOMPLEX
-    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
-    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
-    #define __Pyx_c_diff_double(a, b) ((a)-(b))
-    #define __Pyx_c_prod_double(a, b) ((a)*(b))
-    #define __Pyx_c_quot_double(a, b) ((a)/(b))
-    #define __Pyx_c_neg_double(a)     (-(a))
-  #ifdef __cplusplus
-    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
-    #define __Pyx_c_conj_double(z)    (::std::conj(z))
-    #if 1
-        #define __Pyx_c_abs_double(z)     (::std::abs(z))
-        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
-    #endif
-  #else
-    #define __Pyx_c_is_zero_double(z) ((z)==0)
-    #define __Pyx_c_conj_double(z)    (conj(z))
-    #if 1
-        #define __Pyx_c_abs_double(z)     (cabs(z))
-        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
-    #endif
- #endif
-#else
-    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
-    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
-    #if 1
-        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
-        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
-    #endif
-#endif
-
 /* CIntToPy.proto */
 static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);
 
@@ -1711,44 +1312,7 @@ static int __Pyx_check_binary_version(void);
 static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
 
 
-/* Module declarations from 'cpython.buffer' */
-
-/* Module declarations from 'libc.string' */
-
-/* Module declarations from 'libc.stdio' */
-
-/* Module declarations from '__builtin__' */
-
-/* Module declarations from 'cpython.type' */
-static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
-
-/* Module declarations from 'cpython' */
-
-/* Module declarations from 'cpython.object' */
-
-/* Module declarations from 'cpython.ref' */
-
-/* Module declarations from 'cpython.mem' */
-
-/* Module declarations from 'numpy' */
-
 /* Module declarations from 'numpy' */
-static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
-static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
-static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
-static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
-static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
-static PyTypeObject *__pyx_ptype_5numpy_number = 0;
-static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
-static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
-static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
-static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
-static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
-static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
-static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
-static PyTypeObject *__pyx_ptype_5numpy_character = 0;
-static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
-static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/
 
 /* Module declarations from 'array_ext' */
 static PyTypeObject *__pyx_ptype_9array_ext_ndarray = 0;
@@ -1760,7 +1324,6 @@ int __pyx_module_is_main_array_ext = 0;
 
 /* Implementation of 'array_ext' */
 static PyObject *__pyx_builtin_ValueError;
-static PyObject *__pyx_builtin_ImportError;
 static const char __pyx_k_sz[] = "sz";
 static const char __pyx_k_shp[] = "shp";
 static const char __pyx_k_vtk[] = "vtk";
@@ -1782,27 +1345,23 @@ static const char __pyx_k_out_array[] = "out_array";
 static const char __pyx_k_ValueError[] = "ValueError";
 static const char __pyx_k_contiguous[] = "contiguous";
 static const char __pyx_k_issubdtype[] = "issubdtype";
-static const char __pyx_k_ImportError[] = "ImportError";
-static const char __pyx_k_array_ext_pyx[] = "array_ext.pyx";
+static const char __pyx_k_signedinteger[] = "signedinteger";
 static const char __pyx_k_vtkIdTypeArray[] = "vtkIdTypeArray";
 static const char __pyx_k_GetDataTypeSize[] = "GetDataTypeSize";
 static const char __pyx_k_VTK_ID_TYPE_SIZE[] = "VTK_ID_TYPE_SIZE";
 static const char __pyx_k_set_id_type_array[] = "set_id_type_array";
 static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
+static const char __pyx_k_tvtk_src_array_ext_pyx[] = "tvtk/src/array_ext.pyx";
 static const char __pyx_k_out_array_must_be_contiguous[] = "out_array must be contiguous.";
 static const char __pyx_k_Unsupported_VTK_ID_TYPE_SIZE_d[] = "Unsupported VTK_ID_TYPE_SIZE=%d";
 static const char __pyx_k_A_Cython_extension_module_for_n[] = "\nA Cython extension module for numpy.  Currently this extension module\nallows us to massage a 2D scipy array into a form usable as a\n`vtkIdTypeArray`.  This is then used to set the cells of a\n`vtkCellArray` instance.\n";
-static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
 static const char __pyx_k_id_array_must_be_a_two_dimension[] = "id_array must be a two dimensional array.";
-static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
 static const char __pyx_k_out_array_size_is_incorrect_expe[] = "out_array size is incorrect, expected: ";
 static PyObject *__pyx_n_s_GetDataTypeSize;
-static PyObject *__pyx_n_s_ImportError;
 static PyObject *__pyx_kp_u_Unsupported_VTK_ID_TYPE_SIZE_d;
 static PyObject *__pyx_n_s_VTK_ID_TYPE_SIZE;
 static PyObject *__pyx_n_s_ValueError;
 static PyObject *__pyx_n_s_array_ext;
-static PyObject *__pyx_kp_s_array_ext_pyx;
 static PyObject *__pyx_n_s_cline_in_traceback;
 static PyObject *__pyx_n_s_contiguous;
 static PyObject *__pyx_n_s_dtype;
@@ -1817,17 +1376,17 @@ static PyObject *__pyx_n_s_itemsize;
 static PyObject *__pyx_n_s_main;
 static PyObject *__pyx_n_s_name;
 static PyObject *__pyx_n_s_numpy;
-static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
-static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
 static PyObject *__pyx_n_s_out_array;
 static PyObject *__pyx_kp_u_out_array_must_be_contiguous;
 static PyObject *__pyx_kp_u_out_array_size_is_incorrect_expe;
 static PyObject *__pyx_n_s_set_id_type_array;
 static PyObject *__pyx_n_s_shape;
 static PyObject *__pyx_n_s_shp;
+static PyObject *__pyx_n_s_signedinteger;
 static PyObject *__pyx_n_s_size;
 static PyObject *__pyx_n_s_sz;
 static PyObject *__pyx_n_s_test;
+static PyObject *__pyx_kp_s_tvtk_src_array_ext_pyx;
 static PyObject *__pyx_n_s_vtk;
 static PyObject *__pyx_n_s_vtkIdTypeArray;
 static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_id_array, PyObject *__pyx_v_out_array); /* proto */
@@ -1835,12 +1394,10 @@ static PyObject *__pyx_int_1;
 static PyObject *__pyx_int_4;
 static PyObject *__pyx_int_8;
 static PyObject *__pyx_tuple_;
-static PyObject *__pyx_tuple__2;
-static PyObject *__pyx_tuple__3;
-static PyObject *__pyx_codeobj__4;
+static PyObject *__pyx_codeobj__2;
 /* Late includes */
 
-/* "array_ext.pyx":44
+/* "array_ext.pyx":46
  * ######################################################################
  * 
  * cdef c_set_id_type_array(ndarray id_array, ndarray out_array):             # <<<<<<<<<<<<<<
@@ -1869,7 +1426,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
   int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("c_set_id_type_array", 0);
 
-  /* "array_ext.pyx":59
+  /* "array_ext.pyx":61
  *     cdef int stride0, stride1
  * 
  *     cell_length = id_array.dimensions[1];             # <<<<<<<<<<<<<<
@@ -1878,7 +1435,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
  */
   __pyx_v_cell_length = (__pyx_v_id_array->dimensions[1]);
 
-  /* "array_ext.pyx":60
+  /* "array_ext.pyx":62
  * 
  *     cell_length = id_array.dimensions[1];
  *     dim0 = id_array.dimensions[0]             # <<<<<<<<<<<<<<
@@ -1887,7 +1444,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
  */
   __pyx_v_dim0 = (__pyx_v_id_array->dimensions[0]);
 
-  /* "array_ext.pyx":61
+  /* "array_ext.pyx":63
  *     cell_length = id_array.dimensions[1];
  *     dim0 = id_array.dimensions[0]
  *     id_data = <int*> id_array.data             # <<<<<<<<<<<<<<
@@ -1896,7 +1453,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
  */
   __pyx_v_id_data = ((int *)__pyx_v_id_array->data);
 
-  /* "array_ext.pyx":62
+  /* "array_ext.pyx":64
  *     dim0 = id_array.dimensions[0]
  *     id_data = <int*> id_array.data
  *     out_data = <int*> out_array.data             # <<<<<<<<<<<<<<
@@ -1905,7 +1462,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
  */
   __pyx_v_out_data = ((int *)__pyx_v_out_array->data);
 
-  /* "array_ext.pyx":63
+  /* "array_ext.pyx":65
  *     id_data = <int*> id_array.data
  *     out_data = <int*> out_array.data
  *     stride0 = id_array.strides[0]//sizeof(int)             # <<<<<<<<<<<<<<
@@ -1915,11 +1472,11 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
   __pyx_t_1 = (sizeof(int));
   if (unlikely(__pyx_t_1 == 0)) {
     PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
-    __PYX_ERR(0, 63, __pyx_L1_error)
+    __PYX_ERR(0, 65, __pyx_L1_error)
   }
   __pyx_v_stride0 = ((__pyx_v_id_array->strides[0]) / __pyx_t_1);
 
-  /* "array_ext.pyx":64
+  /* "array_ext.pyx":66
  *     out_data = <int*> out_array.data
  *     stride0 = id_array.strides[0]//sizeof(int)
  *     stride1 = id_array.strides[1]//sizeof(int)             # <<<<<<<<<<<<<<
@@ -1929,11 +1486,11 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
   __pyx_t_1 = (sizeof(int));
   if (unlikely(__pyx_t_1 == 0)) {
     PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
-    __PYX_ERR(0, 64, __pyx_L1_error)
+    __PYX_ERR(0, 66, __pyx_L1_error)
   }
   __pyx_v_stride1 = ((__pyx_v_id_array->strides[1]) / __pyx_t_1);
 
-  /* "array_ext.pyx":67
+  /* "array_ext.pyx":69
  * 
  *     cdef int i, j, in_idx, out_idx
  *     for i from 0 <= i < dim0:             # <<<<<<<<<<<<<<
@@ -1943,7 +1500,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
   __pyx_t_2 = __pyx_v_dim0;
   for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {
 
-    /* "array_ext.pyx":68
+    /* "array_ext.pyx":70
  *     cdef int i, j, in_idx, out_idx
  *     for i from 0 <= i < dim0:
  *         in_idx = i*stride0             # <<<<<<<<<<<<<<
@@ -1952,7 +1509,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
  */
     __pyx_v_in_idx = (__pyx_v_i * __pyx_v_stride0);
 
-    /* "array_ext.pyx":69
+    /* "array_ext.pyx":71
  *     for i from 0 <= i < dim0:
  *         in_idx = i*stride0
  *         out_idx = i*cell_length + i             # <<<<<<<<<<<<<<
@@ -1961,7 +1518,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
  */
     __pyx_v_out_idx = ((__pyx_v_i * __pyx_v_cell_length) + __pyx_v_i);
 
-    /* "array_ext.pyx":70
+    /* "array_ext.pyx":72
  *         in_idx = i*stride0
  *         out_idx = i*cell_length + i
  *         out_data[out_idx] = cell_length             # <<<<<<<<<<<<<<
@@ -1970,7 +1527,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
  */
     (__pyx_v_out_data[__pyx_v_out_idx]) = __pyx_v_cell_length;
 
-    /* "array_ext.pyx":71
+    /* "array_ext.pyx":73
  *         out_idx = i*cell_length + i
  *         out_data[out_idx] = cell_length
  *         for j from 0 <= j < cell_length:             # <<<<<<<<<<<<<<
@@ -1980,7 +1537,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
     __pyx_t_3 = __pyx_v_cell_length;
     for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_3; __pyx_v_j++) {
 
-      /* "array_ext.pyx":72
+      /* "array_ext.pyx":74
  *         out_data[out_idx] = cell_length
  *         for j from 0 <= j < cell_length:
  *             out_data[out_idx + j + 1] = id_data[in_idx + j*stride1]             # <<<<<<<<<<<<<<
@@ -1991,7 +1548,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
     }
   }
 
-  /* "array_ext.pyx":44
+  /* "array_ext.pyx":46
  * ######################################################################
  * 
  * cdef c_set_id_type_array(ndarray id_array, ndarray out_array):             # <<<<<<<<<<<<<<
@@ -2011,7 +1568,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array(PyArrayObject *__pyx_v_i
   return __pyx_r;
 }
 
-/* "array_ext.pyx":74
+/* "array_ext.pyx":76
  *             out_data[out_idx + j + 1] = id_data[in_idx + j*stride1]
  * 
  * cdef c_set_id_type_array_long(ndarray id_array, ndarray out_array):             # <<<<<<<<<<<<<<
@@ -2040,7 +1597,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
   int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("c_set_id_type_array_long", 0);
 
-  /* "array_ext.pyx":88
+  /* "array_ext.pyx":90
  *     cdef Py_ssize_t stride0, stride1
  * 
  *     cell_length = id_array.dimensions[1];             # <<<<<<<<<<<<<<
@@ -2049,7 +1606,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
  */
   __pyx_v_cell_length = (__pyx_v_id_array->dimensions[1]);
 
-  /* "array_ext.pyx":89
+  /* "array_ext.pyx":91
  * 
  *     cell_length = id_array.dimensions[1];
  *     dim0 = id_array.dimensions[0]             # <<<<<<<<<<<<<<
@@ -2058,7 +1615,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
  */
   __pyx_v_dim0 = (__pyx_v_id_array->dimensions[0]);
 
-  /* "array_ext.pyx":90
+  /* "array_ext.pyx":92
  *     cell_length = id_array.dimensions[1];
  *     dim0 = id_array.dimensions[0]
  *     id_data = <Py_ssize_t*> id_array.data             # <<<<<<<<<<<<<<
@@ -2067,7 +1624,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
  */
   __pyx_v_id_data = ((Py_ssize_t *)__pyx_v_id_array->data);
 
-  /* "array_ext.pyx":91
+  /* "array_ext.pyx":93
  *     dim0 = id_array.dimensions[0]
  *     id_data = <Py_ssize_t*> id_array.data
  *     out_data = <Py_ssize_t*> out_array.data             # <<<<<<<<<<<<<<
@@ -2076,7 +1633,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
  */
   __pyx_v_out_data = ((Py_ssize_t *)__pyx_v_out_array->data);
 
-  /* "array_ext.pyx":92
+  /* "array_ext.pyx":94
  *     id_data = <Py_ssize_t*> id_array.data
  *     out_data = <Py_ssize_t*> out_array.data
  *     stride0 = id_array.strides[0]//sizeof(Py_ssize_t)             # <<<<<<<<<<<<<<
@@ -2086,11 +1643,11 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
   __pyx_t_1 = (sizeof(Py_ssize_t));
   if (unlikely(__pyx_t_1 == 0)) {
     PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
-    __PYX_ERR(0, 92, __pyx_L1_error)
+    __PYX_ERR(0, 94, __pyx_L1_error)
   }
   __pyx_v_stride0 = ((__pyx_v_id_array->strides[0]) / __pyx_t_1);
 
-  /* "array_ext.pyx":93
+  /* "array_ext.pyx":95
  *     out_data = <Py_ssize_t*> out_array.data
  *     stride0 = id_array.strides[0]//sizeof(Py_ssize_t)
  *     stride1 = id_array.strides[1]//sizeof(Py_ssize_t)             # <<<<<<<<<<<<<<
@@ -2100,11 +1657,11 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
   __pyx_t_1 = (sizeof(Py_ssize_t));
   if (unlikely(__pyx_t_1 == 0)) {
     PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
-    __PYX_ERR(0, 93, __pyx_L1_error)
+    __PYX_ERR(0, 95, __pyx_L1_error)
   }
   __pyx_v_stride1 = ((__pyx_v_id_array->strides[1]) / __pyx_t_1);
 
-  /* "array_ext.pyx":96
+  /* "array_ext.pyx":98
  * 
  *     cdef int i, j, in_idx, out_idx
  *     for i from 0 <= i < dim0:             # <<<<<<<<<<<<<<
@@ -2114,7 +1671,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
   __pyx_t_2 = __pyx_v_dim0;
   for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {
 
-    /* "array_ext.pyx":97
+    /* "array_ext.pyx":99
  *     cdef int i, j, in_idx, out_idx
  *     for i from 0 <= i < dim0:
  *         in_idx = i*stride0             # <<<<<<<<<<<<<<
@@ -2123,7 +1680,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
  */
     __pyx_v_in_idx = (__pyx_v_i * __pyx_v_stride0);
 
-    /* "array_ext.pyx":98
+    /* "array_ext.pyx":100
  *     for i from 0 <= i < dim0:
  *         in_idx = i*stride0
  *         out_idx = i*cell_length + i             # <<<<<<<<<<<<<<
@@ -2132,7 +1689,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
  */
     __pyx_v_out_idx = ((__pyx_v_i * __pyx_v_cell_length) + __pyx_v_i);
 
-    /* "array_ext.pyx":99
+    /* "array_ext.pyx":101
  *         in_idx = i*stride0
  *         out_idx = i*cell_length + i
  *         out_data[out_idx] = cell_length             # <<<<<<<<<<<<<<
@@ -2141,7 +1698,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
  */
     (__pyx_v_out_data[__pyx_v_out_idx]) = __pyx_v_cell_length;
 
-    /* "array_ext.pyx":100
+    /* "array_ext.pyx":102
  *         out_idx = i*cell_length + i
  *         out_data[out_idx] = cell_length
  *         for j from 0 <= j < cell_length:             # <<<<<<<<<<<<<<
@@ -2151,7 +1708,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
     __pyx_t_3 = __pyx_v_cell_length;
     for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_3; __pyx_v_j++) {
 
-      /* "array_ext.pyx":101
+      /* "array_ext.pyx":103
  *         out_data[out_idx] = cell_length
  *         for j from 0 <= j < cell_length:
  *             out_data[out_idx + j + 1] = id_data[in_idx + j*stride1]             # <<<<<<<<<<<<<<
@@ -2162,7 +1719,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
     }
   }
 
-  /* "array_ext.pyx":74
+  /* "array_ext.pyx":76
  *             out_data[out_idx + j + 1] = id_data[in_idx + j*stride1]
  * 
  * cdef c_set_id_type_array_long(ndarray id_array, ndarray out_array):             # <<<<<<<<<<<<<<
@@ -2182,7 +1739,7 @@ static PyObject *__pyx_f_9array_ext_c_set_id_type_array_long(PyArrayObject *__py
   return __pyx_r;
 }
 
-/* "array_ext.pyx":107
+/* "array_ext.pyx":109
  * ######################################################################
  * 
  * def set_id_type_array(id_array, out_array):             # <<<<<<<<<<<<<<
@@ -2226,11 +1783,11 @@ static PyObject *__pyx_pw_9array_ext_1set_id_type_array(PyObject *__pyx_self, Py
         case  1:
         if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out_array)) != 0)) kw_args--;
         else {
-          __Pyx_RaiseArgtupleInvalid("set_id_type_array", 1, 2, 2, 1); __PYX_ERR(0, 107, __pyx_L3_error)
+          __Pyx_RaiseArgtupleInvalid("set_id_type_array", 1, 2, 2, 1); __PYX_ERR(0, 109, __pyx_L3_error)
         }
       }
       if (unlikely(kw_args > 0)) {
-        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_id_type_array") < 0)) __PYX_ERR(0, 107, __pyx_L3_error)
+        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_id_type_array") < 0)) __PYX_ERR(0, 109, __pyx_L3_error)
       }
     } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
       goto __pyx_L5_argtuple_error;
@@ -2243,7 +1800,7 @@ static PyObject *__pyx_pw_9array_ext_1set_id_type_array(PyObject *__pyx_self, Py
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("set_id_type_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 107, __pyx_L3_error)
+  __Pyx_RaiseArgtupleInvalid("set_id_type_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 109, __pyx_L3_error)
   __pyx_L3_error:;
   __Pyx_AddTraceback("array_ext.set_id_type_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
   __Pyx_RefNannyFinishContext();
@@ -2269,36 +1826,37 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
   PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
   int __pyx_t_5;
-  int __pyx_t_6;
-  PyObject *__pyx_t_7 = NULL;
-  int __pyx_t_8;
-  Py_ssize_t __pyx_t_9;
-  Py_UCS4 __pyx_t_10;
+  PyObject *__pyx_t_6 = NULL;
+  int __pyx_t_7;
+  PyObject *__pyx_t_8 = NULL;
+  int __pyx_t_9;
+  Py_ssize_t __pyx_t_10;
+  Py_UCS4 __pyx_t_11;
   int __pyx_lineno = 0;
   const char *__pyx_filename = NULL;
   int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("set_id_type_array", 0);
 
-  /* "array_ext.pyx":120
+  /* "array_ext.pyx":122
  *     `id_array` need not be contiguous but `out_array` must be.
  *     """
  *     import vtk             # <<<<<<<<<<<<<<
  *     VTK_ID_TYPE_SIZE = vtk.vtkIdTypeArray().GetDataTypeSize()
  *     assert numpy.issubdtype(id_array.dtype, numpy.signedinteger) and \
  */
-  __pyx_t_1 = __Pyx_Import(__pyx_n_s_vtk, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_Import(__pyx_n_s_vtk, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_v_vtk = __pyx_t_1;
   __pyx_t_1 = 0;
 
-  /* "array_ext.pyx":121
+  /* "array_ext.pyx":123
  *     """
  *     import vtk
  *     VTK_ID_TYPE_SIZE = vtk.vtkIdTypeArray().GetDataTypeSize()             # <<<<<<<<<<<<<<
  *     assert numpy.issubdtype(id_array.dtype, numpy.signedinteger) and \
  *        id_array.dtype.itemsize == VTK_ID_TYPE_SIZE
  */
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vtk, __pyx_n_s_vtkIdTypeArray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vtk, __pyx_n_s_vtkIdTypeArray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __pyx_t_4 = NULL;
   if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
@@ -2312,10 +1870,10 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
   }
   __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
-  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
+  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GetDataTypeSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
+  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_GetDataTypeSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_3);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_t_2 = NULL;
@@ -2330,13 +1888,13 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
   }
   __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
-  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
+  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   __pyx_v_VTK_ID_TYPE_SIZE = __pyx_t_1;
   __pyx_t_1 = 0;
 
-  /* "array_ext.pyx":122
+  /* "array_ext.pyx":124
  *     import vtk
  *     VTK_ID_TYPE_SIZE = vtk.vtkIdTypeArray().GetDataTypeSize()
  *     assert numpy.issubdtype(id_array.dtype, numpy.signedinteger) and \             # <<<<<<<<<<<<<<
@@ -2345,15 +1903,20 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
  */
   #ifndef CYTHON_WITHOUT_ASSERTIONS
   if (unlikely(!Py_OptimizeFlag)) {
-    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
+    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_issubdtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_issubdtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_array, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
+    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_array, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_numpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_4);
+    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_signedinteger); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 124, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
     __pyx_t_4 = NULL;
-    __pyx_t_6 = 0;
+    __pyx_t_7 = 0;
     if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
       __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
       if (likely(__pyx_t_4)) {
@@ -2361,78 +1924,80 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
         __Pyx_INCREF(__pyx_t_4);
         __Pyx_INCREF(function);
         __Pyx_DECREF_SET(__pyx_t_2, function);
-        __pyx_t_6 = 1;
+        __pyx_t_7 = 1;
       }
     }
     #if CYTHON_FAST_PYCALL
     if (PyFunction_Check(__pyx_t_2)) {
-      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, ((PyObject *)__pyx_ptype_5numpy_signedinteger)};
-      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
+      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_6};
+      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
       __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_GOTREF(__pyx_t_1);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
     } else
     #endif
     #if CYTHON_FAST_PYCCALL
     if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
-      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, ((PyObject *)__pyx_ptype_5numpy_signedinteger)};
-      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
+      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_6};
+      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
       __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_GOTREF(__pyx_t_1);
       __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
     } else
     #endif
     {
-      __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 122, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_7);
+      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_8);
       if (__pyx_t_4) {
-        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
+        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
       }
       __Pyx_GIVEREF(__pyx_t_3);
-      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
-      __Pyx_INCREF(((PyObject *)__pyx_ptype_5numpy_signedinteger));
-      __Pyx_GIVEREF(((PyObject *)__pyx_ptype_5numpy_signedinteger));
-      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, ((PyObject *)__pyx_ptype_5numpy_signedinteger));
+      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
+      __Pyx_GIVEREF(__pyx_t_6);
+      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_6);
       __pyx_t_3 = 0;
-      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
+      __pyx_t_6 = 0;
+      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_1);
-      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
     }
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
+    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    if (__pyx_t_8) {
+    if (__pyx_t_9) {
     } else {
-      __pyx_t_5 = __pyx_t_8;
+      __pyx_t_5 = __pyx_t_9;
       goto __pyx_L3_bool_binop_done;
     }
 
-    /* "array_ext.pyx":123
+    /* "array_ext.pyx":125
  *     VTK_ID_TYPE_SIZE = vtk.vtkIdTypeArray().GetDataTypeSize()
  *     assert numpy.issubdtype(id_array.dtype, numpy.signedinteger) and \
  *        id_array.dtype.itemsize == VTK_ID_TYPE_SIZE             # <<<<<<<<<<<<<<
  * 
  *     assert out_array.flags.contiguous == 1, \
  */
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_array, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_array, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_VTK_ID_TYPE_SIZE, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
+    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_VTK_ID_TYPE_SIZE, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
+    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __pyx_t_5 = __pyx_t_8;
+    __pyx_t_5 = __pyx_t_9;
     __pyx_L3_bool_binop_done:;
     if (unlikely(!__pyx_t_5)) {
       PyErr_SetNone(PyExc_AssertionError);
-      __PYX_ERR(0, 122, __pyx_L1_error)
+      __PYX_ERR(0, 124, __pyx_L1_error)
     }
   }
   #endif
 
-  /* "array_ext.pyx":125
+  /* "array_ext.pyx":127
  *        id_array.dtype.itemsize == VTK_ID_TYPE_SIZE
  * 
  *     assert out_array.flags.contiguous == 1, \             # <<<<<<<<<<<<<<
@@ -2441,36 +2006,36 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
  */
   #ifndef CYTHON_WITHOUT_ASSERTIONS
   if (unlikely(!Py_OptimizeFlag)) {
-    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_array, __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_array, __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
-    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_contiguous); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
+    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_contiguous); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
+    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_1);
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 127, __pyx_L1_error)
     __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
     if (unlikely(!__pyx_t_5)) {
       PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_out_array_must_be_contiguous);
-      __PYX_ERR(0, 125, __pyx_L1_error)
+      __PYX_ERR(0, 127, __pyx_L1_error)
     }
   }
   #endif
 
-  /* "array_ext.pyx":128
+  /* "array_ext.pyx":130
  *            "out_array must be contiguous."
  * 
  *     shp = id_array.shape             # <<<<<<<<<<<<<<
  *     assert len(shp) == 2, "id_array must be a two dimensional array."
  * 
  */
-  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_array, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_id_array, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
   __pyx_v_shp = __pyx_t_1;
   __pyx_t_1 = 0;
 
-  /* "array_ext.pyx":129
+  /* "array_ext.pyx":131
  * 
  *     shp = id_array.shape
  *     assert len(shp) == 2, "id_array must be a two dimensional array."             # <<<<<<<<<<<<<<
@@ -2479,66 +2044,66 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
  */
   #ifndef CYTHON_WITHOUT_ASSERTIONS
   if (unlikely(!Py_OptimizeFlag)) {
-    __pyx_t_9 = PyObject_Length(__pyx_v_shp); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 129, __pyx_L1_error)
-    if (unlikely(!((__pyx_t_9 == 2) != 0))) {
+    __pyx_t_10 = PyObject_Length(__pyx_v_shp); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 131, __pyx_L1_error)
+    if (unlikely(!((__pyx_t_10 == 2) != 0))) {
       PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_id_array_must_be_a_two_dimension);
-      __PYX_ERR(0, 129, __pyx_L1_error)
+      __PYX_ERR(0, 131, __pyx_L1_error)
     }
   }
   #endif
 
-  /* "array_ext.pyx":131
+  /* "array_ext.pyx":133
  *     assert len(shp) == 2, "id_array must be a two dimensional array."
  * 
  *     sz = numpy.size(out_array)             # <<<<<<<<<<<<<<
  *     e_sz = shp[0]*(shp[1]+1)
  *     assert sz == e_sz, \
  */
-  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
+  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 131, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
+  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 133, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __pyx_t_2 = NULL;
-  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
-    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
+  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
+    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
     if (likely(__pyx_t_2)) {
-      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
+      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
       __Pyx_INCREF(__pyx_t_2);
       __Pyx_INCREF(function);
-      __Pyx_DECREF_SET(__pyx_t_7, function);
+      __Pyx_DECREF_SET(__pyx_t_8, function);
     }
   }
-  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_v_out_array) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_out_array);
+  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_2, __pyx_v_out_array) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_out_array);
   __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
-  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
+  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
   __pyx_v_sz = __pyx_t_1;
   __pyx_t_1 = 0;
 
-  /* "array_ext.pyx":132
+  /* "array_ext.pyx":134
  * 
  *     sz = numpy.size(out_array)
  *     e_sz = shp[0]*(shp[1]+1)             # <<<<<<<<<<<<<<
  *     assert sz == e_sz, \
  *            "out_array size is incorrect, expected: %s, given: %s"%(e_sz, sz)
  */
-  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_shp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_shp, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_shp, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 132, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
-  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
+  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_shp, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 134, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
+  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_8, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-  __pyx_t_7 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 132, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_7);
+  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+  __pyx_t_8 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 134, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_t_8);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_v_e_sz = __pyx_t_7;
-  __pyx_t_7 = 0;
+  __pyx_v_e_sz = __pyx_t_8;
+  __pyx_t_8 = 0;
 
-  /* "array_ext.pyx":133
+  /* "array_ext.pyx":135
  *     sz = numpy.size(out_array)
  *     e_sz = shp[0]*(shp[1]+1)
  *     assert sz == e_sz, \             # <<<<<<<<<<<<<<
@@ -2547,81 +2112,81 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
  */
   #ifndef CYTHON_WITHOUT_ASSERTIONS
   if (unlikely(!Py_OptimizeFlag)) {
-    __pyx_t_7 = PyObject_RichCompare(__pyx_v_sz, __pyx_v_e_sz, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L1_error)
-    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 133, __pyx_L1_error)
-    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+    __pyx_t_8 = PyObject_RichCompare(__pyx_v_sz, __pyx_v_e_sz, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 135, __pyx_L1_error)
+    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
+    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
     if (unlikely(!__pyx_t_5)) {
 
-      /* "array_ext.pyx":134
+      /* "array_ext.pyx":136
  *     e_sz = shp[0]*(shp[1]+1)
  *     assert sz == e_sz, \
  *            "out_array size is incorrect, expected: %s, given: %s"%(e_sz, sz)             # <<<<<<<<<<<<<<
  * 
  *     if VTK_ID_TYPE_SIZE == 4:
  */
-      __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 134, __pyx_L1_error)
-      __Pyx_GOTREF(__pyx_t_7);
-      __pyx_t_9 = 0;
-      __pyx_t_10 = 127;
+      __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 136, __pyx_L1_error)
+      __Pyx_GOTREF(__pyx_t_8);
+      __pyx_t_10 = 0;
+      __pyx_t_11 = 127;
       __Pyx_INCREF(__pyx_kp_u_out_array_size_is_incorrect_expe);
-      __pyx_t_9 += 39;
+      __pyx_t_10 += 39;
       __Pyx_GIVEREF(__pyx_kp_u_out_array_size_is_incorrect_expe);
-      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_out_array_size_is_incorrect_expe);
-      __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_e_sz), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
+      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_out_array_size_is_incorrect_expe);
+      __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_e_sz), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_2);
-      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
-      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
+      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_11;
+      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
       __Pyx_GIVEREF(__pyx_t_2);
-      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
+      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
       __pyx_t_2 = 0;
       __Pyx_INCREF(__pyx_kp_u_given);
-      __pyx_t_9 += 9;
+      __pyx_t_10 += 9;
       __Pyx_GIVEREF(__pyx_kp_u_given);
-      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_given);
-      __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_sz), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
+      PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_given);
+      __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_v_sz), __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_2);
-      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
-      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
+      __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_11;
+      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
       __Pyx_GIVEREF(__pyx_t_2);
-      PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_2);
+      PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_2);
       __pyx_t_2 = 0;
-      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_7, 4, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
+      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_8, 4, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
       __Pyx_GOTREF(__pyx_t_2);
-      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
+      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
       PyErr_SetObject(PyExc_AssertionError, __pyx_t_2);
       __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __PYX_ERR(0, 133, __pyx_L1_error)
+      __PYX_ERR(0, 135, __pyx_L1_error)
     }
   }
   #endif
 
-  /* "array_ext.pyx":136
+  /* "array_ext.pyx":138
  *            "out_array size is incorrect, expected: %s, given: %s"%(e_sz, sz)
  * 
  *     if VTK_ID_TYPE_SIZE == 4:             # <<<<<<<<<<<<<<
  *         c_set_id_type_array(id_array, out_array)
  *     elif VTK_ID_TYPE_SIZE == 8:
  */
-  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_VTK_ID_TYPE_SIZE, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_VTK_ID_TYPE_SIZE, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 136, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 138, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   if (__pyx_t_5) {
 
-    /* "array_ext.pyx":137
+    /* "array_ext.pyx":139
  * 
  *     if VTK_ID_TYPE_SIZE == 4:
  *         c_set_id_type_array(id_array, out_array)             # <<<<<<<<<<<<<<
  *     elif VTK_ID_TYPE_SIZE == 8:
  *         c_set_id_type_array_long(id_array, out_array)
  */
-    if (!(likely(((__pyx_v_id_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_id_array, __pyx_ptype_9array_ext_ndarray))))) __PYX_ERR(0, 137, __pyx_L1_error)
-    if (!(likely(((__pyx_v_out_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_out_array, __pyx_ptype_9array_ext_ndarray))))) __PYX_ERR(0, 137, __pyx_L1_error)
-    __pyx_t_2 = __pyx_f_9array_ext_c_set_id_type_array(((PyArrayObject *)__pyx_v_id_array), ((PyArrayObject *)__pyx_v_out_array)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
+    if (!(likely(((__pyx_v_id_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_id_array, __pyx_ptype_9array_ext_ndarray))))) __PYX_ERR(0, 139, __pyx_L1_error)
+    if (!(likely(((__pyx_v_out_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_out_array, __pyx_ptype_9array_ext_ndarray))))) __PYX_ERR(0, 139, __pyx_L1_error)
+    __pyx_t_2 = __pyx_f_9array_ext_c_set_id_type_array(((PyArrayObject *)__pyx_v_id_array), ((PyArrayObject *)__pyx_v_out_array)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
     __Pyx_GOTREF(__pyx_t_2);
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-    /* "array_ext.pyx":136
+    /* "array_ext.pyx":138
  *            "out_array size is incorrect, expected: %s, given: %s"%(e_sz, sz)
  * 
  *     if VTK_ID_TYPE_SIZE == 4:             # <<<<<<<<<<<<<<
@@ -2631,1125 +2196,101 @@ static PyObject *__pyx_pf_9array_ext_set_id_type_array(CYTHON_UNUSED PyObject *_
     goto __pyx_L5;
   }
 
-  /* "array_ext.pyx":138
+  /* "array_ext.pyx":140
  *     if VTK_ID_TYPE_SIZE == 4:
  *         c_set_id_type_array(id_array, out_array)
  *     elif VTK_ID_TYPE_SIZE == 8:             # <<<<<<<<<<<<<<
  *         c_set_id_type_array_long(id_array, out_array)
  *     else:
  */
-  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_VTK_ID_TYPE_SIZE, __pyx_int_8, 8, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
+  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_VTK_ID_TYPE_SIZE, __pyx_int_8, 8, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 138, __pyx_L1_error)
+  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 140, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   if (likely(__pyx_t_5)) {
 
-    /* "array_ext.pyx":139
+    /* "array_ext.pyx":141
  *         c_set_id_type_array(id_array, out_array)
  *     elif VTK_ID_TYPE_SIZE == 8:
- *         c_set_id_type_array_long(id_array, out_array)             # <<<<<<<<<<<<<<
- *     else:
- *         raise ValueError('Unsupported VTK_ID_TYPE_SIZE=%d'\
- */
-    if (!(likely(((__pyx_v_id_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_id_array, __pyx_ptype_9array_ext_ndarray))))) __PYX_ERR(0, 139, __pyx_L1_error)
-    if (!(likely(((__pyx_v_out_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_out_array, __pyx_ptype_9array_ext_ndarray))))) __PYX_ERR(0, 139, __pyx_L1_error)
-    __pyx_t_2 = __pyx_f_9array_ext_c_set_id_type_array_long(((PyArrayObject *)__pyx_v_id_array), ((PyArrayObject *)__pyx_v_out_array)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-
-    /* "array_ext.pyx":138
- *     if VTK_ID_TYPE_SIZE == 4:
- *         c_set_id_type_array(id_array, out_array)
- *     elif VTK_ID_TYPE_SIZE == 8:             # <<<<<<<<<<<<<<
- *         c_set_id_type_array_long(id_array, out_array)
- *     else:
- */
-    goto __pyx_L5;
-  }
-
-  /* "array_ext.pyx":141
- *         c_set_id_type_array_long(id_array, out_array)
- *     else:
- *         raise ValueError('Unsupported VTK_ID_TYPE_SIZE=%d'\             # <<<<<<<<<<<<<<
- *                          %VTK_ID_TYPE_SIZE)
- */
-  /*else*/ {
-
-    /* "array_ext.pyx":142
- *     else:
- *         raise ValueError('Unsupported VTK_ID_TYPE_SIZE=%d'\
- *                          %VTK_ID_TYPE_SIZE)             # <<<<<<<<<<<<<<
- */
-    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Unsupported_VTK_ID_TYPE_SIZE_d, __pyx_v_VTK_ID_TYPE_SIZE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_2);
-
-    /* "array_ext.pyx":141
- *         c_set_id_type_array_long(id_array, out_array)
- *     else:
- *         raise ValueError('Unsupported VTK_ID_TYPE_SIZE=%d'\             # <<<<<<<<<<<<<<
- *                          %VTK_ID_TYPE_SIZE)
- */
-    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 141, __pyx_L1_error)
-    __Pyx_GOTREF(__pyx_t_7);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
-    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
-    __PYX_ERR(0, 141, __pyx_L1_error)
-  }
-  __pyx_L5:;
-
-  /* "array_ext.pyx":107
- * ######################################################################
- * 
- * def set_id_type_array(id_array, out_array):             # <<<<<<<<<<<<<<
- *     """Given a 2D Int array (`id_array`), and a contiguous 1D numarray
- *     array (`out_array`) having the correct size, this function sets
- */
-
-  /* function exit code */
-  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_XDECREF(__pyx_t_7);
-  __Pyx_AddTraceback("array_ext.set_id_type_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_XDECREF(__pyx_v_vtk);
-  __Pyx_XDECREF(__pyx_v_VTK_ID_TYPE_SIZE);
-  __Pyx_XDECREF(__pyx_v_shp);
-  __Pyx_XDECREF(__pyx_v_sz);
-  __Pyx_XDECREF(__pyx_v_e_sz);
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":723
- * ctypedef npy_cdouble     complex_t
- * 
- * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(1, <void*>a)
- * 
- */
-
-static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":724
- * 
- * cdef inline object PyArray_MultiIterNew1(a):
- *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
- * 
- * cdef inline object PyArray_MultiIterNew2(a, b):
- */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 724, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":723
- * ctypedef npy_cdouble     complex_t
- * 
- * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(1, <void*>a)
- * 
- */
-
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":726
- *     return PyArray_MultiIterNew(1, <void*>a)
- * 
- * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
- * 
- */
-
-static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":727
- * 
- * cdef inline object PyArray_MultiIterNew2(a, b):
- *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
- * 
- * cdef inline object PyArray_MultiIterNew3(a, b, c):
- */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 727, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":726
- *     return PyArray_MultiIterNew(1, <void*>a)
- * 
- * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
- * 
- */
-
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":729
- *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
- * 
- * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
- * 
- */
-
-static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":730
- * 
- * cdef inline object PyArray_MultiIterNew3(a, b, c):
- *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
- * 
- * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
- */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 730, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":729
- *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
- * 
- * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
- * 
- */
-
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":732
- *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
- * 
- * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
- * 
- */
-
-static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":733
- * 
- * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
- *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
- * 
- * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
- */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 733, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":732
- *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
- * 
- * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
- * 
- */
-
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":735
- *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
- * 
- * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
- * 
- */
-
-static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":736
- * 
- * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
- * 
- * cdef inline tuple PyDataType_SHAPE(dtype d):
- */
-  __Pyx_XDECREF(__pyx_r);
-  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 736, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_r = __pyx_t_1;
-  __pyx_t_1 = 0;
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":735
- *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
- * 
- * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
- * 
- */
-
-  /* function exit code */
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = 0;
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":738
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
- * 
- * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
- *     if PyDataType_HASSUBARRAY(d):
- *         return <tuple>d.subarray.shape
- */
-
-static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  int __pyx_t_1;
-  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":739
- * 
- * cdef inline tuple PyDataType_SHAPE(dtype d):
- *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
- *         return <tuple>d.subarray.shape
- *     else:
- */
-  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
-  if (__pyx_t_1) {
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":740
- * cdef inline tuple PyDataType_SHAPE(dtype d):
- *     if PyDataType_HASSUBARRAY(d):
- *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
- *     else:
- *         return ()
- */
-    __Pyx_XDECREF(__pyx_r);
-    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
-    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
-    goto __pyx_L0;
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":739
- * 
- * cdef inline tuple PyDataType_SHAPE(dtype d):
- *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
- *         return <tuple>d.subarray.shape
- *     else:
- */
-  }
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":742
- *         return <tuple>d.subarray.shape
- *     else:
- *         return ()             # <<<<<<<<<<<<<<
- * 
- * 
- */
-  /*else*/ {
-    __Pyx_XDECREF(__pyx_r);
-    __Pyx_INCREF(__pyx_empty_tuple);
-    __pyx_r = __pyx_empty_tuple;
-    goto __pyx_L0;
-  }
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":738
- *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
- * 
- * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
- *     if PyDataType_HASSUBARRAY(d):
- *         return <tuple>d.subarray.shape
- */
-
-  /* function exit code */
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":895
- *     int _import_umath() except -1
- * 
- * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
- *     Py_INCREF(base) # important to do this before stealing the reference below!
- *     PyArray_SetBaseObject(arr, base)
- */
-
-static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
-  __Pyx_RefNannyDeclarations
-  int __pyx_t_1;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("set_array_base", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":896
- * 
- * cdef inline void set_array_base(ndarray arr, object base):
- *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
- *     PyArray_SetBaseObject(arr, base)
- * 
- */
-  Py_INCREF(__pyx_v_base);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":897
- * cdef inline void set_array_base(ndarray arr, object base):
- *     Py_INCREF(base) # important to do this before stealing the reference below!
- *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
- * 
- * cdef inline object get_array_base(ndarray arr):
- */
-  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 897, __pyx_L1_error)
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":895
- *     int _import_umath() except -1
- * 
- * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
- *     Py_INCREF(base) # important to do this before stealing the reference below!
- *     PyArray_SetBaseObject(arr, base)
- */
-
-  /* function exit code */
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
-  __pyx_L0:;
-  __Pyx_RefNannyFinishContext();
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":899
- *     PyArray_SetBaseObject(arr, base)
- * 
- * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
- *     base = PyArray_BASE(arr)
- *     if base is NULL:
- */
-
-static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
-  PyObject *__pyx_v_base;
-  PyObject *__pyx_r = NULL;
-  __Pyx_RefNannyDeclarations
-  int __pyx_t_1;
-  __Pyx_RefNannySetupContext("get_array_base", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":900
- * 
- * cdef inline object get_array_base(ndarray arr):
- *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
- *     if base is NULL:
- *         return None
- */
-  __pyx_v_base = PyArray_BASE(__pyx_v_arr);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":901
- * cdef inline object get_array_base(ndarray arr):
- *     base = PyArray_BASE(arr)
- *     if base is NULL:             # <<<<<<<<<<<<<<
- *         return None
- *     return <object>base
- */
-  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
-  if (__pyx_t_1) {
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":902
- *     base = PyArray_BASE(arr)
- *     if base is NULL:
- *         return None             # <<<<<<<<<<<<<<
- *     return <object>base
- * 
- */
-    __Pyx_XDECREF(__pyx_r);
-    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
-    goto __pyx_L0;
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":901
- * cdef inline object get_array_base(ndarray arr):
- *     base = PyArray_BASE(arr)
- *     if base is NULL:             # <<<<<<<<<<<<<<
- *         return None
- *     return <object>base
- */
-  }
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":903
- *     if base is NULL:
- *         return None
- *     return <object>base             # <<<<<<<<<<<<<<
- * 
- * # Versions of the import_* functions which are more suitable for
- */
-  __Pyx_XDECREF(__pyx_r);
-  __Pyx_INCREF(((PyObject *)__pyx_v_base));
-  __pyx_r = ((PyObject *)__pyx_v_base);
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":899
- *     PyArray_SetBaseObject(arr, base)
- * 
- * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
- *     base = PyArray_BASE(arr)
- *     if base is NULL:
- */
-
-  /* function exit code */
-  __pyx_L0:;
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":907
- * # Versions of the import_* functions which are more suitable for
- * # Cython code.
- * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
- *     try:
- *         __pyx_import_array()
- */
-
-static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
-  int __pyx_r;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  int __pyx_t_4;
-  PyObject *__pyx_t_5 = NULL;
-  PyObject *__pyx_t_6 = NULL;
-  PyObject *__pyx_t_7 = NULL;
-  PyObject *__pyx_t_8 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("import_array", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":908
- * # Cython code.
- * cdef inline int import_array() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         __pyx_import_array()
- *     except Exception:
- */
-  {
-    __Pyx_PyThreadState_declare
-    __Pyx_PyThreadState_assign
-    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
-    __Pyx_XGOTREF(__pyx_t_1);
-    __Pyx_XGOTREF(__pyx_t_2);
-    __Pyx_XGOTREF(__pyx_t_3);
-    /*try:*/ {
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":909
- * cdef inline int import_array() except -1:
- *     try:
- *         __pyx_import_array()             # <<<<<<<<<<<<<<
- *     except Exception:
- *         raise ImportError("numpy.core.multiarray failed to import")
- */
-      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 909, __pyx_L3_error)
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":908
- * # Cython code.
- * cdef inline int import_array() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         __pyx_import_array()
- *     except Exception:
- */
-    }
-    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L8_try_end;
-    __pyx_L3_error:;
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":910
- *     try:
- *         __pyx_import_array()
- *     except Exception:             # <<<<<<<<<<<<<<
- *         raise ImportError("numpy.core.multiarray failed to import")
- * 
- */
-    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
-    if (__pyx_t_4) {
-      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 910, __pyx_L5_except_error)
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_GOTREF(__pyx_t_6);
-      __Pyx_GOTREF(__pyx_t_7);
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":911
- *         __pyx_import_array()
- *     except Exception:
- *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
- * 
- * cdef inline int import_umath() except -1:
- */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 911, __pyx_L5_except_error)
-      __Pyx_GOTREF(__pyx_t_8);
-      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
-      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 911, __pyx_L5_except_error)
-    }
-    goto __pyx_L5_except_error;
-    __pyx_L5_except_error:;
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":908
- * # Cython code.
- * cdef inline int import_array() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         __pyx_import_array()
- *     except Exception:
- */
-    __Pyx_XGIVEREF(__pyx_t_1);
-    __Pyx_XGIVEREF(__pyx_t_2);
-    __Pyx_XGIVEREF(__pyx_t_3);
-    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
-    goto __pyx_L1_error;
-    __pyx_L8_try_end:;
-  }
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":907
- * # Versions of the import_* functions which are more suitable for
- * # Cython code.
- * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
- *     try:
- *         __pyx_import_array()
- */
-
-  /* function exit code */
-  __pyx_r = 0;
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_XDECREF(__pyx_t_7);
-  __Pyx_XDECREF(__pyx_t_8);
-  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = -1;
-  __pyx_L0:;
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":913
- *         raise ImportError("numpy.core.multiarray failed to import")
- * 
- * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
- *     try:
- *         _import_umath()
- */
-
-static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
-  int __pyx_r;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  int __pyx_t_4;
-  PyObject *__pyx_t_5 = NULL;
-  PyObject *__pyx_t_6 = NULL;
-  PyObject *__pyx_t_7 = NULL;
-  PyObject *__pyx_t_8 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("import_umath", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":914
- * 
- * cdef inline int import_umath() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         _import_umath()
- *     except Exception:
- */
-  {
-    __Pyx_PyThreadState_declare
-    __Pyx_PyThreadState_assign
-    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
-    __Pyx_XGOTREF(__pyx_t_1);
-    __Pyx_XGOTREF(__pyx_t_2);
-    __Pyx_XGOTREF(__pyx_t_3);
-    /*try:*/ {
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":915
- * cdef inline int import_umath() except -1:
- *     try:
- *         _import_umath()             # <<<<<<<<<<<<<<
- *     except Exception:
- *         raise ImportError("numpy.core.umath failed to import")
- */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 915, __pyx_L3_error)
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":914
- * 
- * cdef inline int import_umath() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         _import_umath()
- *     except Exception:
- */
-    }
-    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L8_try_end;
-    __pyx_L3_error:;
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":916
- *     try:
- *         _import_umath()
- *     except Exception:             # <<<<<<<<<<<<<<
- *         raise ImportError("numpy.core.umath failed to import")
- * 
- */
-    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
-    if (__pyx_t_4) {
-      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 916, __pyx_L5_except_error)
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_GOTREF(__pyx_t_6);
-      __Pyx_GOTREF(__pyx_t_7);
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":917
- *         _import_umath()
- *     except Exception:
- *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
- * 
- * cdef inline int import_ufunc() except -1:
- */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 917, __pyx_L5_except_error)
-      __Pyx_GOTREF(__pyx_t_8);
-      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
-      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 917, __pyx_L5_except_error)
-    }
-    goto __pyx_L5_except_error;
-    __pyx_L5_except_error:;
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":914
- * 
- * cdef inline int import_umath() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         _import_umath()
- *     except Exception:
- */
-    __Pyx_XGIVEREF(__pyx_t_1);
-    __Pyx_XGIVEREF(__pyx_t_2);
-    __Pyx_XGIVEREF(__pyx_t_3);
-    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
-    goto __pyx_L1_error;
-    __pyx_L8_try_end:;
-  }
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":913
- *         raise ImportError("numpy.core.multiarray failed to import")
- * 
- * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
- *     try:
- *         _import_umath()
- */
-
-  /* function exit code */
-  __pyx_r = 0;
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_XDECREF(__pyx_t_7);
-  __Pyx_XDECREF(__pyx_t_8);
-  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = -1;
-  __pyx_L0:;
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":919
- *         raise ImportError("numpy.core.umath failed to import")
- * 
- * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
- *     try:
- *         _import_umath()
- */
-
-static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
-  int __pyx_r;
-  __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  int __pyx_t_4;
-  PyObject *__pyx_t_5 = NULL;
-  PyObject *__pyx_t_6 = NULL;
-  PyObject *__pyx_t_7 = NULL;
-  PyObject *__pyx_t_8 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
-  __Pyx_RefNannySetupContext("import_ufunc", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":920
- * 
- * cdef inline int import_ufunc() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         _import_umath()
- *     except Exception:
- */
-  {
-    __Pyx_PyThreadState_declare
-    __Pyx_PyThreadState_assign
-    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
-    __Pyx_XGOTREF(__pyx_t_1);
-    __Pyx_XGOTREF(__pyx_t_2);
-    __Pyx_XGOTREF(__pyx_t_3);
-    /*try:*/ {
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":921
- * cdef inline int import_ufunc() except -1:
- *     try:
- *         _import_umath()             # <<<<<<<<<<<<<<
- *     except Exception:
- *         raise ImportError("numpy.core.umath failed to import")
- */
-      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 921, __pyx_L3_error)
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":920
- * 
- * cdef inline int import_ufunc() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         _import_umath()
- *     except Exception:
- */
-    }
-    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
-    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
-    goto __pyx_L8_try_end;
-    __pyx_L3_error:;
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":922
- *     try:
- *         _import_umath()
- *     except Exception:             # <<<<<<<<<<<<<<
- *         raise ImportError("numpy.core.umath failed to import")
- * 
- */
-    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
-    if (__pyx_t_4) {
-      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
-      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 922, __pyx_L5_except_error)
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_GOTREF(__pyx_t_6);
-      __Pyx_GOTREF(__pyx_t_7);
-
-      /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":923
- *         _import_umath()
- *     except Exception:
- *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
- * 
- * cdef extern from *:
- */
-      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 923, __pyx_L5_except_error)
-      __Pyx_GOTREF(__pyx_t_8);
-      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
-      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
-      __PYX_ERR(1, 923, __pyx_L5_except_error)
-    }
-    goto __pyx_L5_except_error;
-    __pyx_L5_except_error:;
-
-    /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":920
- * 
- * cdef inline int import_ufunc() except -1:
- *     try:             # <<<<<<<<<<<<<<
- *         _import_umath()
- *     except Exception:
- */
-    __Pyx_XGIVEREF(__pyx_t_1);
-    __Pyx_XGIVEREF(__pyx_t_2);
-    __Pyx_XGIVEREF(__pyx_t_3);
-    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
-    goto __pyx_L1_error;
-    __pyx_L8_try_end:;
-  }
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":919
- *         raise ImportError("numpy.core.umath failed to import")
- * 
- * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
- *     try:
- *         _import_umath()
- */
-
-  /* function exit code */
-  __pyx_r = 0;
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_XDECREF(__pyx_t_7);
-  __Pyx_XDECREF(__pyx_t_8);
-  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
-  __pyx_r = -1;
-  __pyx_L0:;
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":933
- * 
- * 
- * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
- *     """
- *     Cython equivalent of `isinstance(obj, np.timedelta64)`
- */
-
-static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
-  int __pyx_r;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":945
- *     bool
- *     """
- *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
- * 
- * 
- */
-  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":933
- * 
- * 
- * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
- *     """
- *     Cython equivalent of `isinstance(obj, np.timedelta64)`
- */
-
-  /* function exit code */
-  __pyx_L0:;
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":948
- * 
- * 
- * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
- *     """
- *     Cython equivalent of `isinstance(obj, np.datetime64)`
- */
-
-static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
-  int __pyx_r;
-  __Pyx_RefNannyDeclarations
-  __Pyx_RefNannySetupContext("is_datetime64_object", 0);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":960
- *     bool
- *     """
- *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
- * 
- * 
- */
-  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":948
- * 
- * 
- * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
- *     """
- *     Cython equivalent of `isinstance(obj, np.datetime64)`
- */
-
-  /* function exit code */
-  __pyx_L0:;
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":963
- * 
- * 
- * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
- *     """
- *     returns the int64 value underlying scalar numpy datetime64 object
- */
-
-static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
-  npy_datetime __pyx_r;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":970
- *     also needed.  That can be found using `get_datetime64_unit`.
- *     """
- *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
- * 
- * 
- */
-  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":963
- * 
- * 
- * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
- *     """
- *     returns the int64 value underlying scalar numpy datetime64 object
- */
-
-  /* function exit code */
-  __pyx_L0:;
-  return __pyx_r;
-}
-
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":973
- * 
- * 
- * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
- *     """
- *     returns the int64 value underlying scalar numpy timedelta64 object
- */
-
-static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
-  npy_timedelta __pyx_r;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":977
- *     returns the int64 value underlying scalar numpy timedelta64 object
- *     """
- *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
- * 
- * 
- */
-  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
-  goto __pyx_L0;
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":973
- * 
- * 
- * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
- *     """
- *     returns the int64 value underlying scalar numpy timedelta64 object
+ *         c_set_id_type_array_long(id_array, out_array)             # <<<<<<<<<<<<<<
+ *     else:
+ *         raise ValueError('Unsupported VTK_ID_TYPE_SIZE=%d'\
  */
+    if (!(likely(((__pyx_v_id_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_id_array, __pyx_ptype_9array_ext_ndarray))))) __PYX_ERR(0, 141, __pyx_L1_error)
+    if (!(likely(((__pyx_v_out_array) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_out_array, __pyx_ptype_9array_ext_ndarray))))) __PYX_ERR(0, 141, __pyx_L1_error)
+    __pyx_t_2 = __pyx_f_9array_ext_c_set_id_type_array_long(((PyArrayObject *)__pyx_v_id_array), ((PyArrayObject *)__pyx_v_out_array)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
 
-  /* function exit code */
-  __pyx_L0:;
-  return __pyx_r;
-}
+    /* "array_ext.pyx":140
+ *     if VTK_ID_TYPE_SIZE == 4:
+ *         c_set_id_type_array(id_array, out_array)
+ *     elif VTK_ID_TYPE_SIZE == 8:             # <<<<<<<<<<<<<<
+ *         c_set_id_type_array_long(id_array, out_array)
+ *     else:
+ */
+    goto __pyx_L5;
+  }
 
-/* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":980
- * 
- * 
- * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
- *     """
- *     returns the unit part of the dtype for a numpy datetime64 object.
+  /* "array_ext.pyx":143
+ *         c_set_id_type_array_long(id_array, out_array)
+ *     else:
+ *         raise ValueError('Unsupported VTK_ID_TYPE_SIZE=%d'\             # <<<<<<<<<<<<<<
+ *                          %VTK_ID_TYPE_SIZE)
  */
+  /*else*/ {
 
-static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
-  NPY_DATETIMEUNIT __pyx_r;
+    /* "array_ext.pyx":144
+ *     else:
+ *         raise ValueError('Unsupported VTK_ID_TYPE_SIZE=%d'\
+ *                          %VTK_ID_TYPE_SIZE)             # <<<<<<<<<<<<<<
+ */
+    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Unsupported_VTK_ID_TYPE_SIZE_d, __pyx_v_VTK_ID_TYPE_SIZE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_2);
 
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":984
- *     returns the unit part of the dtype for a numpy datetime64 object.
- *     """
- *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
+    /* "array_ext.pyx":143
+ *         c_set_id_type_array_long(id_array, out_array)
+ *     else:
+ *         raise ValueError('Unsupported VTK_ID_TYPE_SIZE=%d'\             # <<<<<<<<<<<<<<
+ *                          %VTK_ID_TYPE_SIZE)
  */
-  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
-  goto __pyx_L0;
+    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 143, __pyx_L1_error)
+    __Pyx_GOTREF(__pyx_t_8);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
+    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
+    __PYX_ERR(0, 143, __pyx_L1_error)
+  }
+  __pyx_L5:;
 
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":980
- * 
+  /* "array_ext.pyx":109
+ * ######################################################################
  * 
- * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
- *     """
- *     returns the unit part of the dtype for a numpy datetime64 object.
+ * def set_id_type_array(id_array, out_array):             # <<<<<<<<<<<<<<
+ *     """Given a 2D Int array (`id_array`), and a contiguous 1D numarray
+ *     array (`out_array`) having the correct size, this function sets
  */
 
   /* function exit code */
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_6);
+  __Pyx_XDECREF(__pyx_t_8);
+  __Pyx_AddTraceback("array_ext.set_id_type_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
+  __pyx_r = NULL;
   __pyx_L0:;
+  __Pyx_XDECREF(__pyx_v_vtk);
+  __Pyx_XDECREF(__pyx_v_VTK_ID_TYPE_SIZE);
+  __Pyx_XDECREF(__pyx_v_shp);
+  __Pyx_XDECREF(__pyx_v_sz);
+  __Pyx_XDECREF(__pyx_v_e_sz);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
@@ -3800,12 +2341,10 @@ static struct PyModuleDef __pyx_moduledef = {
 
 static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s_GetDataTypeSize, __pyx_k_GetDataTypeSize, sizeof(__pyx_k_GetDataTypeSize), 0, 0, 1, 1},
-  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
   {&__pyx_kp_u_Unsupported_VTK_ID_TYPE_SIZE_d, __pyx_k_Unsupported_VTK_ID_TYPE_SIZE_d, sizeof(__pyx_k_Unsupported_VTK_ID_TYPE_SIZE_d), 0, 1, 0, 0},
   {&__pyx_n_s_VTK_ID_TYPE_SIZE, __pyx_k_VTK_ID_TYPE_SIZE, sizeof(__pyx_k_VTK_ID_TYPE_SIZE), 0, 0, 1, 1},
   {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
   {&__pyx_n_s_array_ext, __pyx_k_array_ext, sizeof(__pyx_k_array_ext), 0, 0, 1, 1},
-  {&__pyx_kp_s_array_ext_pyx, __pyx_k_array_ext_pyx, sizeof(__pyx_k_array_ext_pyx), 0, 0, 1, 0},
   {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
   {&__pyx_n_s_contiguous, __pyx_k_contiguous, sizeof(__pyx_k_contiguous), 0, 0, 1, 1},
   {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
@@ -3820,24 +2359,23 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
   {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
   {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
-  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
-  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
   {&__pyx_n_s_out_array, __pyx_k_out_array, sizeof(__pyx_k_out_array), 0, 0, 1, 1},
   {&__pyx_kp_u_out_array_must_be_contiguous, __pyx_k_out_array_must_be_contiguous, sizeof(__pyx_k_out_array_must_be_contiguous), 0, 1, 0, 0},
   {&__pyx_kp_u_out_array_size_is_incorrect_expe, __pyx_k_out_array_size_is_incorrect_expe, sizeof(__pyx_k_out_array_size_is_incorrect_expe), 0, 1, 0, 0},
   {&__pyx_n_s_set_id_type_array, __pyx_k_set_id_type_array, sizeof(__pyx_k_set_id_type_array), 0, 0, 1, 1},
   {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
   {&__pyx_n_s_shp, __pyx_k_shp, sizeof(__pyx_k_shp), 0, 0, 1, 1},
+  {&__pyx_n_s_signedinteger, __pyx_k_signedinteger, sizeof(__pyx_k_signedinteger), 0, 0, 1, 1},
   {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
   {&__pyx_n_s_sz, __pyx_k_sz, sizeof(__pyx_k_sz), 0, 0, 1, 1},
   {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
+  {&__pyx_kp_s_tvtk_src_array_ext_pyx, __pyx_k_tvtk_src_array_ext_pyx, sizeof(__pyx_k_tvtk_src_array_ext_pyx), 0, 0, 1, 0},
   {&__pyx_n_s_vtk, __pyx_k_vtk, sizeof(__pyx_k_vtk), 0, 0, 1, 1},
   {&__pyx_n_s_vtkIdTypeArray, __pyx_k_vtkIdTypeArray, sizeof(__pyx_k_vtkIdTypeArray), 0, 0, 1, 1},
   {0, 0, 0, 0, 0, 0, 0}
 };
 static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
-  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 141, __pyx_L1_error)
-  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 911, __pyx_L1_error)
+  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 143, __pyx_L1_error)
   return 0;
   __pyx_L1_error:;
   return -1;
@@ -3847,39 +2385,17 @@ static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
   __Pyx_RefNannyDeclarations
   __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
 
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":911
- *         __pyx_import_array()
- *     except Exception:
- *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
- * 
- * cdef inline int import_umath() except -1:
- */
-  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 911, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple_);
-  __Pyx_GIVEREF(__pyx_tuple_);
-
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":917
- *         _import_umath()
- *     except Exception:
- *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
- * 
- * cdef inline int import_ufunc() except -1:
- */
-  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 917, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__2);
-  __Pyx_GIVEREF(__pyx_tuple__2);
-
-  /* "array_ext.pyx":107
+  /* "array_ext.pyx":109
  * ######################################################################
  * 
  * def set_id_type_array(id_array, out_array):             # <<<<<<<<<<<<<<
  *     """Given a 2D Int array (`id_array`), and a contiguous 1D numarray
  *     array (`out_array`) having the correct size, this function sets
  */
-  __pyx_tuple__3 = PyTuple_Pack(7, __pyx_n_s_id_array, __pyx_n_s_out_array, __pyx_n_s_vtk, __pyx_n_s_VTK_ID_TYPE_SIZE, __pyx_n_s_shp, __pyx_n_s_sz, __pyx_n_s_e_sz); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 107, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_tuple__3);
-  __Pyx_GIVEREF(__pyx_tuple__3);
-  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_array_ext_pyx, __pyx_n_s_set_id_type_array, 107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 107, __pyx_L1_error)
+  __pyx_tuple_ = PyTuple_Pack(7, __pyx_n_s_id_array, __pyx_n_s_out_array, __pyx_n_s_vtk, __pyx_n_s_VTK_ID_TYPE_SIZE, __pyx_n_s_shp, __pyx_n_s_sz, __pyx_n_s_e_sz); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 109, __pyx_L1_error)
+  __Pyx_GOTREF(__pyx_tuple_);
+  __Pyx_GIVEREF(__pyx_tuple_);
+  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_tvtk_src_array_ext_pyx, __pyx_n_s_set_id_type_array, 109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 109, __pyx_L1_error)
   __Pyx_RefNannyFinishContext();
   return 0;
   __pyx_L1_error:;
@@ -3952,62 +2468,10 @@ static int __Pyx_modinit_type_init_code(void) {
 
 static int __Pyx_modinit_type_import_code(void) {
   __Pyx_RefNannyDeclarations
-  PyObject *__pyx_t_1 = NULL;
-  int __pyx_lineno = 0;
-  const char *__pyx_filename = NULL;
-  int __pyx_clineno = 0;
   __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
   /*--- Type import code ---*/
-  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
-  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
-  sizeof(PyTypeObject),
-  #else
-  sizeof(PyHeapTypeObject),
-  #endif
-  __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
-   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(1, 199, __pyx_L1_error)
-  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
-   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(1, 222, __pyx_L1_error)
-  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
-   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(1, 226, __pyx_L1_error)
-  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
-   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(1, 238, __pyx_L1_error)
-  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(1, 759, __pyx_L1_error)
-  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_number) __PYX_ERR(1, 761, __pyx_L1_error)
-  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(1, 763, __pyx_L1_error)
-  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(1, 765, __pyx_L1_error)
-  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(1, 767, __pyx_L1_error)
-  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(1, 769, __pyx_L1_error)
-  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(1, 771, __pyx_L1_error)
-  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(1, 773, __pyx_L1_error)
-  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(1, 775, __pyx_L1_error)
-  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
-   if (!__pyx_ptype_5numpy_character) __PYX_ERR(1, 777, __pyx_L1_error)
-  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
-   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(1, 815, __pyx_L1_error)
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_RefNannyFinishContext();
   return 0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_RefNannyFinishContext();
-  return -1;
 }
 
 static int __Pyx_modinit_variable_import_code(void) {
@@ -4121,7 +2585,6 @@ static CYTHON_SMALL_CODE int __pyx_pymod_exec_array_ext(PyObject *__pyx_pyinit_m
 #endif
 {
   PyObject *__pyx_t_1 = NULL;
-  int __pyx_t_2;
   int __pyx_lineno = 0;
   const char *__pyx_filename = NULL;
   int __pyx_clineno = 0;
@@ -4219,7 +2682,7 @@ if (!__Pyx_RefNanny) {
   (void)__Pyx_modinit_variable_export_code();
   (void)__Pyx_modinit_function_export_code();
   if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
-  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
+  (void)__Pyx_modinit_type_import_code();
   (void)__Pyx_modinit_variable_import_code();
   (void)__Pyx_modinit_function_import_code();
   /*--- Execution code ---*/
@@ -4227,37 +2690,37 @@ if (!__Pyx_RefNanny) {
   if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   #endif
 
-  /* "array_ext.pyx":14
- * # License: BSD Style.
+  /* "array_ext.pyx":15
+ * 
  * 
  * import numpy             # <<<<<<<<<<<<<<
- * cimport numpy
  * 
+ * ######################################################################
  */
-  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
+  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "array_ext.pyx":38
- *         cdef int flags
+  /* "array_ext.pyx":40
+ *     void import_array()
  * 
- * numpy.import_array()             # <<<<<<<<<<<<<<
+ * import_array()             # <<<<<<<<<<<<<<
  * 
  * ######################################################################
  */
-  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 38, __pyx_L1_error)
+  import_array();
 
-  /* "array_ext.pyx":107
+  /* "array_ext.pyx":109
  * ######################################################################
  * 
  * def set_id_type_array(id_array, out_array):             # <<<<<<<<<<<<<<
  *     """Given a 2D Int array (`id_array`), and a contiguous 1D numarray
  *     array (`out_array`) having the correct size, this function sets
  */
-  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9array_ext_1set_id_type_array, NULL, __pyx_n_s_array_ext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
+  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9array_ext_1set_id_type_array, NULL, __pyx_n_s_array_ext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
   __Pyx_GOTREF(__pyx_t_1);
-  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_id_type_array, __pyx_t_1) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
+  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_id_type_array, __pyx_t_1) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
   /* "array_ext.pyx":1
@@ -4270,14 +2733,6 @@ if (!__Pyx_RefNanny) {
   if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
 
-  /* "../../../virtualenvs/base/lib/python3.11/site-packages/numpy/__init__.pxd":980
- * 
- * 
- * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
- *     """
- *     returns the unit part of the dtype for a numpy datetime64 object.
- */
-
   /*--- Wrapped vars code ---*/
 
   goto __pyx_L0;
@@ -5444,203 +3899,6 @@ bad:
 }
 #endif
 
-/* WriteUnraisableException */
-static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
-                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
-                                  int full_traceback, CYTHON_UNUSED int nogil) {
-    PyObject *old_exc, *old_val, *old_tb;
-    PyObject *ctx;
-    __Pyx_PyThreadState_declare
-#ifdef WITH_THREAD
-    PyGILState_STATE state;
-    if (nogil)
-        state = PyGILState_Ensure();
-#ifdef _MSC_VER
-    else state = (PyGILState_STATE)-1;
-#endif
-#endif
-    __Pyx_PyThreadState_assign
-    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
-    if (full_traceback) {
-        Py_XINCREF(old_exc);
-        Py_XINCREF(old_val);
-        Py_XINCREF(old_tb);
-        __Pyx_ErrRestore(old_exc, old_val, old_tb);
-        PyErr_PrintEx(1);
-    }
-    #if PY_MAJOR_VERSION < 3
-    ctx = PyString_FromString(name);
-    #else
-    ctx = PyUnicode_FromString(name);
-    #endif
-    __Pyx_ErrRestore(old_exc, old_val, old_tb);
-    if (!ctx) {
-        PyErr_WriteUnraisable(Py_None);
-    } else {
-        PyErr_WriteUnraisable(ctx);
-        Py_DECREF(ctx);
-    }
-#ifdef WITH_THREAD
-    if (nogil)
-        PyGILState_Release(state);
-#endif
-}
-
-/* GetTopmostException */
-#if CYTHON_USE_EXC_INFO_STACK
-static _PyErr_StackItem *
-__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
-{
-    _PyErr_StackItem *exc_info = tstate->exc_info;
-    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
-           exc_info->previous_item != NULL)
-    {
-        exc_info = exc_info->previous_item;
-    }
-    return exc_info;
-}
-#endif
-
-/* SaveResetException */
-#if CYTHON_FAST_THREAD_STATE
-static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
-    #if CYTHON_USE_EXC_INFO_STACK
-    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
-    *type = exc_info->exc_type;
-    *value = exc_info->exc_value;
-    *tb = exc_info->exc_traceback;
-    #else
-    *type = tstate->exc_type;
-    *value = tstate->exc_value;
-    *tb = tstate->exc_traceback;
-    #endif
-    Py_XINCREF(*type);
-    Py_XINCREF(*value);
-    Py_XINCREF(*tb);
-}
-static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
-    PyObject *tmp_type, *tmp_value, *tmp_tb;
-    #if CYTHON_USE_EXC_INFO_STACK
-    _PyErr_StackItem *exc_info = tstate->exc_info;
-    tmp_type = exc_info->exc_type;
-    tmp_value = exc_info->exc_value;
-    tmp_tb = exc_info->exc_traceback;
-    exc_info->exc_type = type;
-    exc_info->exc_value = value;
-    exc_info->exc_traceback = tb;
-    #else
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = type;
-    tstate->exc_value = value;
-    tstate->exc_traceback = tb;
-    #endif
-    Py_XDECREF(tmp_type);
-    Py_XDECREF(tmp_value);
-    Py_XDECREF(tmp_tb);
-}
-#endif
-
-/* PyErrExceptionMatches */
-#if CYTHON_FAST_THREAD_STATE
-static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
-    Py_ssize_t i, n;
-    n = PyTuple_GET_SIZE(tuple);
-#if PY_MAJOR_VERSION >= 3
-    for (i=0; i<n; i++) {
-        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
-    }
-#endif
-    for (i=0; i<n; i++) {
-        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
-    }
-    return 0;
-}
-static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
-    PyObject *exc_type = tstate->curexc_type;
-    if (exc_type == err) return 1;
-    if (unlikely(!exc_type)) return 0;
-    if (unlikely(PyTuple_Check(err)))
-        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
-    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
-}
-#endif
-
-/* GetException */
-#if CYTHON_FAST_THREAD_STATE
-static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
-#else
-static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
-#endif
-{
-    PyObject *local_type, *local_value, *local_tb;
-#if CYTHON_FAST_THREAD_STATE
-    PyObject *tmp_type, *tmp_value, *tmp_tb;
-    local_type = tstate->curexc_type;
-    local_value = tstate->curexc_value;
-    local_tb = tstate->curexc_traceback;
-    tstate->curexc_type = 0;
-    tstate->curexc_value = 0;
-    tstate->curexc_traceback = 0;
-#else
-    PyErr_Fetch(&local_type, &local_value, &local_tb);
-#endif
-    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
-#if CYTHON_FAST_THREAD_STATE
-    if (unlikely(tstate->curexc_type))
-#else
-    if (unlikely(PyErr_Occurred()))
-#endif
-        goto bad;
-    #if PY_MAJOR_VERSION >= 3
-    if (local_tb) {
-        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
-            goto bad;
-    }
-    #endif
-    Py_XINCREF(local_tb);
-    Py_XINCREF(local_type);
-    Py_XINCREF(local_value);
-    *type = local_type;
-    *value = local_value;
-    *tb = local_tb;
-#if CYTHON_FAST_THREAD_STATE
-    #if CYTHON_USE_EXC_INFO_STACK
-    {
-        _PyErr_StackItem *exc_info = tstate->exc_info;
-        tmp_type = exc_info->exc_type;
-        tmp_value = exc_info->exc_value;
-        tmp_tb = exc_info->exc_traceback;
-        exc_info->exc_type = local_type;
-        exc_info->exc_value = local_value;
-        exc_info->exc_traceback = local_tb;
-    }
-    #else
-    tmp_type = tstate->exc_type;
-    tmp_value = tstate->exc_value;
-    tmp_tb = tstate->exc_traceback;
-    tstate->exc_type = local_type;
-    tstate->exc_value = local_value;
-    tstate->exc_traceback = local_tb;
-    #endif
-    Py_XDECREF(tmp_type);
-    Py_XDECREF(tmp_value);
-    Py_XDECREF(tmp_tb);
-#else
-    PyErr_SetExcInfo(local_type, local_value, local_tb);
-#endif
-    return 0;
-bad:
-    *type = 0;
-    *value = 0;
-    *tb = 0;
-    Py_XDECREF(local_type);
-    Py_XDECREF(local_value);
-    Py_XDECREF(local_tb);
-    return -1;
-}
-
 /* TypeImport */
 #ifndef __PYX_HAVE_RT_ImportType
 #define __PYX_HAVE_RT_ImportType
@@ -5931,314 +4189,6 @@ bad:
     Py_XDECREF(py_frame);
 }
 
-/* Declarations */
-#if CYTHON_CCOMPLEX
-  #ifdef __cplusplus
-    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
-      return ::std::complex< float >(x, y);
-    }
-  #else
-    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
-      return x + y*(__pyx_t_float_complex)_Complex_I;
-    }
-  #endif
-#else
-    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
-      __pyx_t_float_complex z;
-      z.real = x;
-      z.imag = y;
-      return z;
-    }
-#endif
-
-/* Arithmetic */
-#if CYTHON_CCOMPLEX
-#else
-    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
-       return (a.real == b.real) && (a.imag == b.imag);
-    }
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
-        __pyx_t_float_complex z;
-        z.real = a.real + b.real;
-        z.imag = a.imag + b.imag;
-        return z;
-    }
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
-        __pyx_t_float_complex z;
-        z.real = a.real - b.real;
-        z.imag = a.imag - b.imag;
-        return z;
-    }
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
-        __pyx_t_float_complex z;
-        z.real = a.real * b.real - a.imag * b.imag;
-        z.imag = a.real * b.imag + a.imag * b.real;
-        return z;
-    }
-    #if 1
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
-        if (b.imag == 0) {
-            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
-        } else if (fabsf(b.real) >= fabsf(b.imag)) {
-            if (b.real == 0 && b.imag == 0) {
-                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
-            } else {
-                float r = b.imag / b.real;
-                float s = (float)(1.0) / (b.real + b.imag * r);
-                return __pyx_t_float_complex_from_parts(
-                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
-            }
-        } else {
-            float r = b.real / b.imag;
-            float s = (float)(1.0) / (b.imag + b.real * r);
-            return __pyx_t_float_complex_from_parts(
-                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
-        }
-    }
-    #else
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
-        if (b.imag == 0) {
-            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
-        } else {
-            float denom = b.real * b.real + b.imag * b.imag;
-            return __pyx_t_float_complex_from_parts(
-                (a.real * b.real + a.imag * b.imag) / denom,
-                (a.imag * b.real - a.real * b.imag) / denom);
-        }
-    }
-    #endif
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
-        __pyx_t_float_complex z;
-        z.real = -a.real;
-        z.imag = -a.imag;
-        return z;
-    }
-    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
-       return (a.real == 0) && (a.imag == 0);
-    }
-    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
-        __pyx_t_float_complex z;
-        z.real =  a.real;
-        z.imag = -a.imag;
-        return z;
-    }
-    #if 1
-        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
-          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
-            return sqrtf(z.real*z.real + z.imag*z.imag);
-          #else
-            return hypotf(z.real, z.imag);
-          #endif
-        }
-        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
-            __pyx_t_float_complex z;
-            float r, lnr, theta, z_r, z_theta;
-            if (b.imag == 0 && b.real == (int)b.real) {
-                if (b.real < 0) {
-                    float denom = a.real * a.real + a.imag * a.imag;
-                    a.real = a.real / denom;
-                    a.imag = -a.imag / denom;
-                    b.real = -b.real;
-                }
-                switch ((int)b.real) {
-                    case 0:
-                        z.real = 1;
-                        z.imag = 0;
-                        return z;
-                    case 1:
-                        return a;
-                    case 2:
-                        return __Pyx_c_prod_float(a, a);
-                    case 3:
-                        z = __Pyx_c_prod_float(a, a);
-                        return __Pyx_c_prod_float(z, a);
-                    case 4:
-                        z = __Pyx_c_prod_float(a, a);
-                        return __Pyx_c_prod_float(z, z);
-                }
-            }
-            if (a.imag == 0) {
-                if (a.real == 0) {
-                    return a;
-                } else if (b.imag == 0) {
-                    z.real = powf(a.real, b.real);
-                    z.imag = 0;
-                    return z;
-                } else if (a.real > 0) {
-                    r = a.real;
-                    theta = 0;
-                } else {
-                    r = -a.real;
-                    theta = atan2f(0.0, -1.0);
-                }
-            } else {
-                r = __Pyx_c_abs_float(a);
-                theta = atan2f(a.imag, a.real);
-            }
-            lnr = logf(r);
-            z_r = expf(lnr * b.real - theta * b.imag);
-            z_theta = theta * b.real + lnr * b.imag;
-            z.real = z_r * cosf(z_theta);
-            z.imag = z_r * sinf(z_theta);
-            return z;
-        }
-    #endif
-#endif
-
-/* Declarations */
-#if CYTHON_CCOMPLEX
-  #ifdef __cplusplus
-    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
-      return ::std::complex< double >(x, y);
-    }
-  #else
-    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
-      return x + y*(__pyx_t_double_complex)_Complex_I;
-    }
-  #endif
-#else
-    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
-      __pyx_t_double_complex z;
-      z.real = x;
-      z.imag = y;
-      return z;
-    }
-#endif
-
-/* Arithmetic */
-#if CYTHON_CCOMPLEX
-#else
-    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
-       return (a.real == b.real) && (a.imag == b.imag);
-    }
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
-        __pyx_t_double_complex z;
-        z.real = a.real + b.real;
-        z.imag = a.imag + b.imag;
-        return z;
-    }
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
-        __pyx_t_double_complex z;
-        z.real = a.real - b.real;
-        z.imag = a.imag - b.imag;
-        return z;
-    }
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
-        __pyx_t_double_complex z;
-        z.real = a.real * b.real - a.imag * b.imag;
-        z.imag = a.real * b.imag + a.imag * b.real;
-        return z;
-    }
-    #if 1
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
-        if (b.imag == 0) {
-            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
-        } else if (fabs(b.real) >= fabs(b.imag)) {
-            if (b.real == 0 && b.imag == 0) {
-                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
-            } else {
-                double r = b.imag / b.real;
-                double s = (double)(1.0) / (b.real + b.imag * r);
-                return __pyx_t_double_complex_from_parts(
-                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
-            }
-        } else {
-            double r = b.real / b.imag;
-            double s = (double)(1.0) / (b.imag + b.real * r);
-            return __pyx_t_double_complex_from_parts(
-                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
-        }
-    }
-    #else
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
-        if (b.imag == 0) {
-            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
-        } else {
-            double denom = b.real * b.real + b.imag * b.imag;
-            return __pyx_t_double_complex_from_parts(
-                (a.real * b.real + a.imag * b.imag) / denom,
-                (a.imag * b.real - a.real * b.imag) / denom);
-        }
-    }
-    #endif
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
-        __pyx_t_double_complex z;
-        z.real = -a.real;
-        z.imag = -a.imag;
-        return z;
-    }
-    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
-       return (a.real == 0) && (a.imag == 0);
-    }
-    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
-        __pyx_t_double_complex z;
-        z.real =  a.real;
-        z.imag = -a.imag;
-        return z;
-    }
-    #if 1
-        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
-          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
-            return sqrt(z.real*z.real + z.imag*z.imag);
-          #else
-            return hypot(z.real, z.imag);
-          #endif
-        }
-        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
-            __pyx_t_double_complex z;
-            double r, lnr, theta, z_r, z_theta;
-            if (b.imag == 0 && b.real == (int)b.real) {
-                if (b.real < 0) {
-                    double denom = a.real * a.real + a.imag * a.imag;
-                    a.real = a.real / denom;
-                    a.imag = -a.imag / denom;
-                    b.real = -b.real;
-                }
-                switch ((int)b.real) {
-                    case 0:
-                        z.real = 1;
-                        z.imag = 0;
-                        return z;
-                    case 1:
-                        return a;
-                    case 2:
-                        return __Pyx_c_prod_double(a, a);
-                    case 3:
-                        z = __Pyx_c_prod_double(a, a);
-                        return __Pyx_c_prod_double(z, a);
-                    case 4:
-                        z = __Pyx_c_prod_double(a, a);
-                        return __Pyx_c_prod_double(z, z);
-                }
-            }
-            if (a.imag == 0) {
-                if (a.real == 0) {
-                    return a;
-                } else if (b.imag == 0) {
-                    z.real = pow(a.real, b.real);
-                    z.imag = 0;
-                    return z;
-                } else if (a.real > 0) {
-                    r = a.real;
-                    theta = 0;
-                } else {
-                    r = -a.real;
-                    theta = atan2(0.0, -1.0);
-                }
-            } else {
-                r = __Pyx_c_abs_double(a);
-                theta = atan2(a.imag, a.real);
-            }
-            lnr = log(r);
-            z_r = exp(lnr * b.real - theta * b.imag);
-            z_theta = theta * b.real + lnr * b.imag;
-            z.real = z_r * cos(z_theta);
-            z.imag = z_r * sin(z_theta);
-            return z;
-        }
-    #endif
-#endif
-
 /* CIntToPy */
 static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
 #ifdef __Pyx_HAS_GCC_DIAGNOSTIC
diff --git a/tvtk/src/array_ext.pyx b/tvtk/src/array_ext.pyx
index 380459de..bb2e3e73 100644
--- a/tvtk/src/array_ext.pyx
+++ b/tvtk/src/array_ext.pyx
@@ -12,7 +12,6 @@ allows us to massage a 2D scipy array into a form usable as a
 # License: BSD Style.
 
 import numpy
-cimport numpy
 
 ######################################################################
 # External declarations.
@@ -35,7 +34,9 @@ cdef extern from "numpy/arrayobject.h":
         cdef PyArray_Descr *descr
         cdef int flags
 
-numpy.import_array()
+    void import_array()
+
+import_array()
 
 ######################################################################
 # Internal C functions.
diff --git a/tvtk/tests/test_ctf_util.py b/tvtk/tests/test_ctf_util.py
index d02b03be..ad65168c 100644
--- a/tvtk/tests/test_ctf_util.py
+++ b/tvtk/tests/test_ctf_util.py
@@ -1,6 +1,5 @@
 """Simple tests for the color transfer function utilities in tvtk."""
 
-import pytest
 import unittest
 
 from tvtk.util.ctf import (load_ctfs, save_ctfs, \
@@ -58,7 +57,6 @@ class TestCTFUtil(unittest.TestCase):
         # check that both the data are identical.
         self.assertEqual(mdata, data)
 
-    @pytest.mark.xfail(reason="Failing on osmesa / headless tests")
     def test_rescale_ctf(self):
         """Test rescaling a CTF."""
         # Expected data.
@@ -73,3 +71,4 @@ class TestCTFUtil(unittest.TestCase):
 
 if __name__ == '__main__':
     unittest.main()
+
diff --git a/tvtk/tests/test_tvtk.py b/tvtk/tests/test_tvtk.py
index 3cba92c5..fe496a2c 100644
--- a/tvtk/tests/test_tvtk.py
+++ b/tvtk/tests/test_tvtk.py
@@ -18,7 +18,6 @@ import types
 import inspect
 import re
 import numpy
-from textwrap import indent
 
 from tvtk import tvtk_base
 from tvtk.common import get_tvtk_name, configure_input_data
@@ -155,8 +154,6 @@ class TestTVTK(unittest.TestCase):
         p.diffuse_color = (1, 1, 1)
         p.specular_color = (1, 1, 0)
         for t, g in p._updateable_traits_:
-            if g == "GetEdgeOpacity":
-                continue  # broken for some reason?
             val = getattr(p._vtk_obj, g)()
             if t in ['representation', 'interpolation']:
                 self.assertEqual(val, getattr(p, t + '_'))
@@ -822,10 +819,9 @@ class TestTVTKModule(unittest.TestCase):
             tvtk_name = get_tvtk_name(name)
             tvtk_klass = getattr(tvtk, tvtk_name, None)
             try:
-                obj = tvtk_klass()
-            # TypeError: super(type, obj): obj must be an instance or subtype of type
-            except (TraitError, KeyError, TypeError):
-                errors.append(f"\n{name}:\n{indent(traceback.format_exc(), '  ')}")
+                tvtk_klass()
+            except (TraitError, KeyError):
+                errors.append(traceback.format_exc())
         if len(errors) > 0:
             message = "Not all classes could be instantiated:\n{0}\n"
             raise AssertionError(message.format(''.join(errors)))
@@ -877,14 +873,6 @@ class TestTVTKModule(unittest.TestCase):
                 if max_value is not None and min_value is not None:
                     # If max and min values are defined, setting the trait
                     # to outside this range should fail
-
-                    # A not totally supported trait
-                    # tvtk.tvtk_classes.open_gl_cell_grid_render_request.shapes_to_draw
-                    # uses strings
-                    if isinstance(min_value, str):
-                        name = "tvtk.tvtk_classes.open_gl_cell_grid_render_request"
-                        assert name in repr(obj), (obj, trait_name)
-                        continue
                     with self.assertRaises(TraitError):
                         setattr(obj, trait_name, (min_value-1, max_value))
                     with self.assertRaises(TraitError):
diff --git a/tvtk/tests/test_vtk_parser.py b/tvtk/tests/test_vtk_parser.py
index c97635f5..ceab86b7 100644
--- a/tvtk/tests/test_vtk_parser.py
+++ b/tvtk/tests/test_vtk_parser.py
@@ -127,7 +127,7 @@ class TestVTKParser(unittest.TestCase):
             res['NormalScale'] = (1., None)
             res['OcclusionStrength'] = (1., float_max)
             res['Roughness'] = (0.5, float_max)
-        if (vtk_major_version, vtk_minor_version) >= (9, 1):
+        if vtk_major_version >= 9 and vtk_minor_version > 0:
             res['Anisotropy'] = (0.0, (0.0, 1.0))
             res['AnisotropyRotation'] = (0.0, (0.0, 1.0))
             res['BaseIOR'] = (1.5, (1.0, 9.999999680285692e+37))
@@ -140,8 +140,6 @@ class TestVTKParser(unittest.TestCase):
             res['SelectionColor'] = ((1.0, 0.0, 0.0, 1.0), None)
             res['SelectionLineWidth'] = (2.0, None)
             res['SelectionPointSize'] = (2.0, None)
-        if (vtk_major_version, vtk_minor_version) >= (9, 3):
-            res['EdgeOpacity'] = (1.0, None)
 
         result = list(p.get_get_set_methods().keys())
         if hasattr(obj, 'GetTexture'):
diff --git a/tvtk/tools/tvtk_doc.py b/tvtk/tools/tvtk_doc.py
index 78569765..95cb72da 100644
--- a/tvtk/tools/tvtk_doc.py
+++ b/tvtk/tools/tvtk_doc.py
@@ -64,7 +64,7 @@ def get_tvtk_class_names():
     sink = []
     bad_names = []
     ver = vtk.vtkVersion()
-    if (ver.GetVTKMajorVersion(), ver.GetVTKMinorVersion()) >= (9, 2):
+    if (ver.GetVTKMajorVersion(), ver.GetVTKMinorVersion()) == (9, 2):
         bad_names.append('vtkOpenGLAvatar')
 
     for name in dir(vtk):
diff --git a/tvtk/version.py b/tvtk/version.py
index 7c8b9beb..37ecf57c 100644
--- a/tvtk/version.py
+++ b/tvtk/version.py
@@ -1,9 +1,10 @@
 # Wrapped in a try/except in those situations where someone hasn't installed
 # as an egg.  What do we do then?  For now, we just punt since we don't want
 # to define the version number in two places.
-import importlib.metadata
-
 try:
-    version = importlib.metadata.version('mayavi')
-except Exception:
+    import pkg_resources
+    version = pkg_resources.require('Mayavi')[0].version
+except:
     version = ''
+
+
diff --git a/tvtk/vtk_module.py b/tvtk/vtk_module.py
index 69dad0eb..db4eb39a 100644
--- a/tvtk/vtk_module.py
+++ b/tvtk/vtk_module.py
@@ -45,11 +45,3 @@ if vtk_version == '9.2.0':
         del vtkPlotBar
     except NameError:
         pass
-
-if vtk_version.startswith('9.3'):
-    # Cannot instantiate (TypeError) on Linux at least
-    SKIP = ['vtkDGBoundsResponder', "vtkDGOpenGLRenderer", "vtkDGSidesResponder"]
-    try:
-        del vtkDGBoundsResponder, vtkDGOpenGLRenderer, vtkDGSidesResponder
-    except NameError:
-        pass
\ No newline at end of file
diff --git a/tvtk/vtk_parser.py b/tvtk/vtk_parser.py
index 031af8f3..fbbb394b 100644
--- a/tvtk/vtk_parser.py
+++ b/tvtk/vtk_parser.py
@@ -714,20 +714,6 @@ class VTKMethodParser:
                         except TypeError:
                             default = None
 
-                    # If we don't turn these into integers, they won't instantiate
-                    if is_version_9():
-                        if klass_name == "vtkAxisActor":
-                            if key in (
-                                "AxisOnOrigin", "Use2DMode", "UseTextActor3D",
-                            ):
-                                default = int(bool(default))
-                        elif klass_name in ("vtkCubeAxesActor", "vtkPolarAxesActor"):
-                            if key in (
-                                "EnableDistanceLOD", "EnableViewAngleLOD", "Use2DMode",
-                                "UseAxisOrigin", "UseOrientedBounds", "UseTextActor3D",
-                            ):
-                                default = int(bool(default))
-
                     if value:
                         low = getattr(obj, 'Get%sMinValue' % key)()
                         high = getattr(obj, 'Get%sMaxValue' % key)()
diff --git a/tvtk/wrapper_gen.py b/tvtk/wrapper_gen.py
index 12606e1a..76a8849a 100644
--- a/tvtk/wrapper_gen.py
+++ b/tvtk/wrapper_gen.py
@@ -6,7 +6,6 @@ VTK classes.
 # Copyright (c) 2004-2020, Enthought, Inc.
 # License: BSD Style.
 
-import faulthandler
 import re
 import sys
 import vtk
@@ -17,13 +16,18 @@ from itertools import chain
 
 # Local imports (these are relative imports because the package is not
 # installed when these modules are imported).
-from .common import get_tvtk_name, camel2enthought, vtk_major_version, _sanitize_name
+from .common import get_tvtk_name, camel2enthought, vtk_major_version
 
 from . import vtk_parser
 from . import indenter
 from . import special_gen
 
-faulthandler.enable()
+try:
+    import faulthandler
+except ImportError:
+    pass
+else:
+    faulthandler.enable()
 
 
 def get_trait_def(value, **kwargs):
@@ -766,10 +770,7 @@ class WrapperGenerator:
             # --------------------------------------------------------
             # Has a specified range of valid values.  Write and done
             # --------------------------------------------------------
-            # vtkOpenGLCellGridRenderRequest.ShapesToDraw is a char between
-            # 1 and 9 which we don't handle yet... so add a conditional
-            # on the first `rng` element
-            if rng and not isinstance(rng[0], str):
+            if rng:
                 self._write_trait_with_range(klass, out, vtk_attr_name)
                 continue
 
@@ -944,7 +945,6 @@ class WrapperGenerator:
             # are usually special methods.
             return name
 
-        name = _sanitize_name(name)
         res = camel2enthought(name)
         if keyword.iskeyword(res):
             return res + '_'
@@ -1412,8 +1412,6 @@ class WrapperGenerator:
         setter is treated as if it accepts a list of parameters.  If
         not the setter is treated as if it accepts a single parameter.
         """
-        assert t_name  # nonempty
-        assert not t_name[0].isdigit(), t_name  # would be a SyntaxError
         indent = self.indent
         getter = '_get_%s'%t_name
         vtk_get_name = vtk_get_meth.__name__
